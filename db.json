{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/head.png","path":"images/head.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"8ed11943437736f3a9134b81f36c56560312cfdb","modified":1547220179907},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1538118908000},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1538118908000},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1538118908000},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1538118908000},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1538118908000},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1538118908000},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1538118908000},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1538118908000},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1538118908000},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1538118908000},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1538118908000},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1538118908000},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1538118908000},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1538118908000},{"_id":"themes/next/_config.yml","hash":"6b1fd5e8eab583e770fbaccdc5f76f55215183ef","modified":1559014264816},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1538118908000},{"_id":"source/_posts/curl.md","hash":"4165d4614b8572376f7d29eed0bfdd224ded7fa6","modified":1557903001380},{"_id":"source/_posts/atomic.md","hash":"080fe4e4f772cfc9d77065182426fa4d05a25813","modified":1557903013677},{"_id":"source/_posts/gorutine.md","hash":"89f5683fcb7e7a46dcaab952592c92bf29a2aa60","modified":1557911872054},{"_id":"source/_posts/.DS_Store","hash":"e920bebede8572b2237284bd9c9ed3018d522e5c","modified":1543309695332},{"_id":"source/_posts/first-blog.md","hash":"c781a446037f9a8509a5b0c165d25b254e77205a","modified":1553593657291},{"_id":"source/_posts/jq.md","hash":"48584fc7f0ea57e188a8a46d8cc685b25111b292","modified":1557903607782},{"_id":"source/_posts/list.md","hash":"c74aa510e829c41fa674baa4580398e5aa363f16","modified":1557892550403},{"_id":"source/_posts/http.md","hash":"ab50cc3c6344060174d6585fedd4cade9dc4564d","modified":1557914153071},{"_id":"source/_posts/memcached.md","hash":"16fb4631442b8f9fc5c6b67d68c6fd49b39d32fa","modified":1557902886682},{"_id":"source/_posts/pandoc.md","hash":"7a52d4bd75c2e0dfc16a7c3349378f69ca1263d1","modified":1557902901199},{"_id":"source/_posts/service.md","hash":"c3458465df53a787a4cee0c466c7acf2ba89c684","modified":1557903513534},{"_id":"source/_posts/sort.md","hash":"a74c4a208342b9e4ef8cbdb2dcec3444f6cadfd3","modified":1557902939742},{"_id":"source/_posts/sql.md","hash":"23f50547f2a11c99995d98ea1e4013e426b4b914","modified":1557902949623},{"_id":"source/_posts/kafka.md","hash":"f12522abe91c56adb33a8a441113880090807675","modified":1557903649306},{"_id":"source/categories/index.md","hash":"c17bca35e33c40e802cbeb49f96354fd8cb79246","modified":1538216560000},{"_id":"source/images/head.png","hash":"84e9f0388630f31ed717d408f603961b8681c49e","modified":1540459242000},{"_id":"source/_posts/xargs.md","hash":"5f1427f4180b26fdfc0c1552664f219f98a1eaf0","modified":1557892782589},{"_id":"source/tags/index.md","hash":"4042b86e662957c4ac80a552b4905cafefe774d5","modified":1538216574000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1538118908000},{"_id":"themes/next/.git/config","hash":"4f94cb26d3406bb52f35806c75544b9aa1faab62","modified":1538118908000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1538118894000},{"_id":"themes/next/.git/index","hash":"b0f143fc27574df4681c348c88bebebb85821f8e","modified":1550726878941},{"_id":"themes/next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1538118908000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1538118908000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1538118908000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1538118908000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1538118908000},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1538118908000},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1538118908000},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1538118908000},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1538118908000},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1538118908000},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1538118908000},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1538118908000},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1538118908000},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1538118908000},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1538118908000},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1538118908000},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1538118908000},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1538118908000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1538118908000},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1538118908000},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1538118908000},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1538118908000},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1538118908000},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1538118908000},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1538118908000},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1538118908000},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1538118908000},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1538118908000},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1538118908000},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1538118908000},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1538118908000},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1538118908000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1538118908000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1538118908000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538118908000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1538118894000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1538118894000},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1538118894000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1538118894000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1538118894000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1538118894000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1538118894000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1538118894000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1538118894000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1538118894000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1538118894000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1538118894000},{"_id":"themes/next/.git/logs/HEAD","hash":"728d07e271988306bbafb0d3a899dbc6f4620dc7","modified":1538118908000},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1538118908000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1538118908000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1538118908000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1538118908000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1538118908000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1538118908000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1538118908000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1538118908000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1538118908000},{"_id":"themes/next/layout/_macro/post.swig","hash":"239d85e6bcd63e68a2e98c161c5511b3bf86a58a","modified":1540892350000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1538118908000},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1538118908000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1538118908000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1538118908000},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1538118908000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1538118908000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1538118908000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1538118908000},{"_id":"themes/next/layout/_scripts/lean-analytics.swig","hash":"1acdb47c1dfb39f5b2d70352db27bc6a7422d7c3","modified":1540892090000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1538118908000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1538118908000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1538118908000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1538118908000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1538118908000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1538118908000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1538118908000},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1538118908000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1538118908000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1538118908000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1538118908000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1538118908000},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1538118908000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1538118908000},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1538118908000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1538118908000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1538118908000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1538118908000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1538118908000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1538118908000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1538118908000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1538118908000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1538118908000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1538118908000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1538118908000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1538118908000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1538118908000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1538118908000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1538118908000},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1538118908000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1538118908000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1538118908000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1538118908000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1538118908000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1538118908000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538118908000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538118908000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538118908000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538118908000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538118908000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538118908000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538118908000},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1538118908000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1538118908000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1538118908000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1538118908000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1538118908000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1538118908000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1538118908000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1538118908000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1538118908000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1538118908000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1538118908000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1538118908000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1538118908000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1538118908000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1538118908000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1538118908000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1538118908000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1538118908000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1538118908000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1538118908000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1538118908000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1538118908000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1538118908000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1538118908000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1538118908000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1538118908000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1538118908000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1538118908000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1538118908000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1538118908000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1538118908000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1538118908000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1538118908000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1538118908000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"cdda8e5ebcdd915059e17ca3ec4fd039677965a7","modified":1553594119353},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1538118908000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1538118908000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1538118908000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1538118908000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1538118908000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1538118908000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1538118908000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1538118908000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1538118908000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1538118908000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1538118908000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1538118908000},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1538118908000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1538118908000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1538118908000},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1538118908000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1538118908000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1538118908000},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1538118908000},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1538118908000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1538118908000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1538118908000},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1538118908000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1538118908000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1538118908000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1538118908000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1538118908000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1538118908000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1538118908000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1538118908000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1538118908000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1538118908000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1538118908000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1538118908000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1538118908000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1538118908000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1538118908000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1538118908000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1538118908000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1538118908000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1538118908000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1538118908000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1538118908000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1538118908000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1538118908000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1538118908000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1538118908000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1538118908000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1538118908000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1538118908000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1538118908000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1538118908000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1538118908000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1538118908000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1538118908000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1538118908000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1538118908000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1538118908000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1538118908000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1538118908000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1538118908000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1538118908000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1538118908000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1538118908000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1538118908000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1538118908000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1538118908000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1538118908000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"728d07e271988306bbafb0d3a899dbc6f4620dc7","modified":1538118908000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1538118908000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1538118908000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1538118908000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1538118908000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1538118908000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1538118908000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1538118908000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1538118908000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1538118908000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1538118908000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1538118908000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1538118908000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1538118908000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1538118908000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1538118908000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1538118908000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1538118908000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1538118908000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1538118908000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1538118908000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1538118908000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1538118908000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1538118908000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1538118908000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1538118908000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"728d07e271988306bbafb0d3a899dbc6f4620dc7","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1538118908000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1538118908000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1538118908000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1538118908000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1538118908000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1538118908000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1538118908000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1538118908000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1538118908000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1538118908000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1538118908000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1538118908000},{"_id":"themes/next/.git/objects/pack/pack-09df78575dd506cafcb2c517908ed591431fdc71.idx","hash":"be430c584ec6e1499b87f9e416e72d0fbc2e3a26","modified":1538118908000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1538118908000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1538118908000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1538118908000},{"_id":"themes/next/.git/objects/pack/pack-09df78575dd506cafcb2c517908ed591431fdc71.pack","hash":"eee901eb2f4a4df31eaa41634f4e9de643c3fb4e","modified":1538118908000},{"_id":"public/atom.xml","hash":"d26c3b43d4b93a858639121116e98da73adc6e88","modified":1557914164927},{"_id":"public/search.xml","hash":"8c9a8aa59369d4ff89fcff3260551530ce8970db","modified":1557914054727},{"_id":"public/categories/index.html","hash":"83ac576a3061b75dbe40b613ffb2b1503dfa9d01","modified":1559014310145},{"_id":"public/tags/index.html","hash":"7537221dd3376f4c8b5fb490e22245765eb4c630","modified":1559014310145},{"_id":"public/2019/05/14/service/index.html","hash":"db11df4daf5e02971bf8e88dd8ced93f913a503c","modified":1559014310146},{"_id":"public/2019/04/15/gorutine/index.html","hash":"e3b0ac5af09b1bdadb352eee94b35b7aa428131f","modified":1559014310146},{"_id":"public/2018/12/19/kafka/index.html","hash":"1b067979f7850d6e749b2bd288edd4b9ac080341","modified":1559014310146},{"_id":"public/2018/12/18/xargs/index.html","hash":"c53dc86b39ca7146233f4ae08b764b83ba2c5e1c","modified":1559014310146},{"_id":"public/2018/12/18/curl/index.html","hash":"36f7e821f534059640ec87a40a1e5e4716b49c55","modified":1559014310146},{"_id":"public/2018/12/18/pandoc/index.html","hash":"99a4ac2049c7aa55988d679676140ea72956b580","modified":1559014310146},{"_id":"public/2018/12/18/jq/index.html","hash":"d80ceae01a700588c29efeed167942060a02996b","modified":1559014310146},{"_id":"public/2018/12/10/atomic/index.html","hash":"604cd627d512ca79203bdf9af9206c2e76eb09a3","modified":1559014310146},{"_id":"public/2018/11/11/memcached/index.html","hash":"3288ed7880f77270ca5b7cf0720592b5f13d5a4f","modified":1559014310146},{"_id":"public/2018/10/26/sql/index.html","hash":"35df9b08b299ab592064219f367258b777e438a9","modified":1559014310146},{"_id":"public/2018/10/25/sort/index.html","hash":"64c7ef6c116464ab36fc50c9155aac34bab42b1a","modified":1559014310146},{"_id":"public/2018/10/25/list/index.html","hash":"60fa398a62a389cba22c78f4472664e988d6969a","modified":1559014310146},{"_id":"public/2018/10/25/http/index.html","hash":"91d68ae95a3542efdd2cf62238911fb6b90fd8ea","modified":1559014310146},{"_id":"public/2018/09/29/first-blog/index.html","hash":"1540378069057714d82df4b23890343b04075daf","modified":1559014310146},{"_id":"public/archives/index.html","hash":"676e8ccf935bd14840c4d9db1194007706de41e2","modified":1559014310147},{"_id":"public/archives/page/2/index.html","hash":"738d7a30683a394a21e89bc2eb282c4ac6ebd597","modified":1559014310147},{"_id":"public/archives/2018/index.html","hash":"3d08202273bb20e5d5d23685cbfa05018d1a1bdd","modified":1559014310147},{"_id":"public/archives/2018/page/2/index.html","hash":"7295b4facfb1774c8a0f8c6043a63016eebdd620","modified":1559014310147},{"_id":"public/archives/2018/09/index.html","hash":"2ea983461c5884feb93163f5a13cacd3f5a9108c","modified":1559014310147},{"_id":"public/archives/2018/10/index.html","hash":"9310f3d74dad0a15e28e567c5942c5a4ec53b27a","modified":1559014310147},{"_id":"public/archives/2018/11/index.html","hash":"007fdcc11984719615224d742395c7e5b8dffeb9","modified":1559014310147},{"_id":"public/archives/2018/12/index.html","hash":"128562063e5f1099e9683cc9850836fc938cb409","modified":1559014310147},{"_id":"public/archives/2019/index.html","hash":"65930d8252db18eec8dc412e0318ffd54c233a1d","modified":1559014310147},{"_id":"public/archives/2019/04/index.html","hash":"c97377e15c3dee5aed01ece0889b42b7ce543ef4","modified":1559014310147},{"_id":"public/archives/2019/05/index.html","hash":"7dc6583ae0e5d71d82bcd3dd1a88c7b1357cd26b","modified":1559014310147},{"_id":"public/categories/协议/index.html","hash":"78c3f688079f396801b63e0d1ace58705e09d3ae","modified":1559014310146},{"_id":"public/categories/go/index.html","hash":"5af707892c3c7f2dc5c7cf829026b8e193269057","modified":1559014310146},{"_id":"public/categories/Hello/index.html","hash":"29b75197cfc28902f6806085ebbf25f4286a2085","modified":1559014310146},{"_id":"public/categories/工具/index.html","hash":"4bed2aace60d91ead264693384dd568accb319c6","modified":1559014310146},{"_id":"public/categories/数据结构/index.html","hash":"976f28e0a8709fa31722b95e7c4be140bcd1babb","modified":1559014310146},{"_id":"public/categories/缓存/index.html","hash":"e9e8cc5293bf8f2ad36ea765e2a5f741d6634296","modified":1559014310146},{"_id":"public/categories/组件/index.html","hash":"ec006dee208a4d875b15813be4a3b87b52a2c476","modified":1559014310147},{"_id":"public/categories/算法/index.html","hash":"d2ce21996bb124163e5de0200fbfb7c1b2f10f2e","modified":1559014310147},{"_id":"public/categories/数据库/index.html","hash":"4cf0885af95075962ef52ff0b3d37339bb256f49","modified":1559014310147},{"_id":"public/categories/消息队列/index.html","hash":"3ccffcf043ca4c80f7acf98cf5e2a9e4b5e7035a","modified":1559014310147},{"_id":"public/index.html","hash":"62db914eb3aeb318da1f7a14d568ed8a90a52a81","modified":1559014310148},{"_id":"public/page/2/index.html","hash":"9a53a46363cde5ce417f2dce8005f93a6af0ed4c","modified":1559014310148},{"_id":"public/tags/atomic/index.html","hash":"512e8fa3387d1c120d6c555c092b3c669382c6ba","modified":1559014310147},{"_id":"public/tags/gorutine/index.html","hash":"759b6710d591c7eec6021cfdb55430983b5ace20","modified":1559014310147},{"_id":"public/tags/json文本处理/index.html","hash":"2213cdefa482e919b5b56ff3974759ec2c9e3276","modified":1559014310147},{"_id":"public/tags/链表/index.html","hash":"8e93103f1d9615994af29cde93fed336eb036673","modified":1559014310148},{"_id":"public/tags/memcached/index.html","hash":"bc49f6e3cbcf09918811ac072858787540ddf6f3","modified":1559014310148},{"_id":"public/tags/pandoc/index.html","hash":"94b80b468de70d33935823481d705922b7e59f7e","modified":1559014310148},{"_id":"public/tags/服务发现/index.html","hash":"177d4393a56c0270fbb639782a0201aa8ad2fee8","modified":1559014310148},{"_id":"public/tags/堆排序/index.html","hash":"28d1956ea0e0782a487b4778a9548816d28bd77c","modified":1559014310148},{"_id":"public/tags/归并排序/index.html","hash":"ecf671d12fe50961acbe4bf7b5fcbe7f5cc7bd40","modified":1559014310148},{"_id":"public/tags/mysql/index.html","hash":"5ac48a0e8d5b7cb65fab03ff291439d7eace6a8e","modified":1559014310148},{"_id":"public/tags/数据库规范/index.html","hash":"b1196c45a3630da1db81e99e73f3c2ac062b4ebe","modified":1559014310148},{"_id":"public/tags/xargs/index.html","hash":"7afee1e299f65ad5884505481cdea97cbd8bfa18","modified":1559014310148},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1557905868913},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1557905868913},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1557905868913},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1557905868913},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1557905868913},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1557905868913},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1557905868913},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1557905868913},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1557905868914},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1557905868914},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1557905868914},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1557905868914},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1557905868914},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557905868914},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1557905868914},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1557905868914},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557905868914},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1557905868914},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1557905868914},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1557905868914},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1557905868914},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1557905868914},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1557905868914},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1557905868914},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1557905868914},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1557905868914},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1557905868914},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1557905868915},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1557905868915},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1557905868915},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1557905868915},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1557905868915},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1557905868915},{"_id":"public/images/head.png","hash":"84e9f0388630f31ed717d408f603961b8681c49e","modified":1557905869380},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1557905869381},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1557905869383},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1557905869390},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1557905869390},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1557905869391},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1557905869391},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1557905869391},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1557905869391},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1557905869391},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1557905869391},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1557905869391},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1557905869391},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1557905869391},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1557905869391},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1557905869391},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1557905869391},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1557905869391},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1557905869391},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1557905869392},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1557905869392},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1557905869392},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1557905869392},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1557905869392},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1557905869392},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1557905869392},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1557905869392},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1557905869392},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1557905869392},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1557905869392},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1557905869392},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1557905869392},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1557905869392},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1557905869392},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1557905869392},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1557905869392},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1557905869392},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1557905869392},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1557905869393},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1557905869393},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1557905869393},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1557905869393},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1557905869393},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1557905869395},{"_id":"public/css/main.css","hash":"2a18600d3dac90678ac160eac8a91d26352c2213","modified":1557905869396},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1557905869396},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1557905869396},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1557905869396},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1557905869410},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1557905869410},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1557905869411},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1557905869411},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1557905869411},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1557905869411},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1557905869411},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1557905869411},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1557905869414},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1557905869414},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1557905869423},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1557905869423},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1557905869445},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1557905869445},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1557905869447},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1557905869447},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1557905869447},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1557905869447},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1557905869447},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1557905869478},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1557905869478},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1557905869494},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1557905869494},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1557905869563},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1557905869604},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1557905869604},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1557905869624},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1557905869676},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1557905869685}],"Category":[{"name":"协议","_id":"cjvowxfo60003sb924qtrjcv5"},{"name":"go","_id":"cjvowxfod0008sb92g3h05ee5"},{"name":"Hello","_id":"cjvowxfoo000jsb92hin5k30k"},{"name":"工具","_id":"cjvowxfou000rsb9201s3mn3k"},{"name":"数据结构","_id":"cjvowxfox000xsb92b8e6twmt"},{"name":"缓存","_id":"cjvowxfoy0011sb92ygw7wrfe"},{"name":"组件","_id":"cjvowxfp10019sb92f5tboe8w"},{"name":"算法","_id":"cjvowxfp2001dsb92fnixhsek"},{"name":"数据库","_id":"cjvowxfp3001hsb92lg9vv053"},{"name":"消息队列","_id":"cjvowxftt001ssb92zvofyzmx"}],"Data":[],"Page":[{"title":"categories","date":"2018-09-29T09:24:02.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-29 17:24:02\ntype: \"categories\"\n---\n","updated":"2018-09-29T10:22:40.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjvowxfo20001sb9236gzjrlk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-09-29T06:51:25.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-29 14:51:25\ntype: \"tags\"\n---\n","updated":"2018-09-29T10:22:54.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjvowxftq001rsb928ldssir1","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"curl参数","comments":1,"_content":"\n## curl常用参数  \n\n<!-- more --> \n\n## -o 输出到文件\n```\ncurl -o home.html  http://www.baidu.com\n```\n## -s 不输出任何东西\n```\ncurl -s \n```\n## -# 进度条显示当前传送状态\n\n## -O 后面的url要具体到某个文件，不然抓不下来\n\n```\n curl -# -O  http://www.baidu.com/1.jpg\n```\n## -x 使用http代理\n```\n curl -x 24.10.28.84:32779 -o home.html http://www.baidu.com\n```\n## 断点续传，-C(大写的)\n```\ncurl -C -O  http://www.baidu.com/1.jpg\n```\n## 使用cookie\n```\ncurl -b ./cookie.txt  http://www.baidu.com/admin \n```\n## 模拟表单信息，模拟登录，保存cookie信息\n```\ncurl -c ./cookie_c.txt -F log=aaaa -F pwd=****** http://blog.51yip.com/wp-login.php  \n```\n## 模拟表单信息，模拟登录，保存头信息\n```\ncurl -D ./cookie_c.txt -F log=aaaa -F pwd=****** http://blog.51yip.com/wp-login.php  \n```","source":"_posts/curl.md","raw":"---\ntitle: curl参数\ncategories: \n- 协议\ntags: \ncomments: true\n---\n\n## curl常用参数  \n\n<!-- more --> \n\n## -o 输出到文件\n```\ncurl -o home.html  http://www.baidu.com\n```\n## -s 不输出任何东西\n```\ncurl -s \n```\n## -# 进度条显示当前传送状态\n\n## -O 后面的url要具体到某个文件，不然抓不下来\n\n```\n curl -# -O  http://www.baidu.com/1.jpg\n```\n## -x 使用http代理\n```\n curl -x 24.10.28.84:32779 -o home.html http://www.baidu.com\n```\n## 断点续传，-C(大写的)\n```\ncurl -C -O  http://www.baidu.com/1.jpg\n```\n## 使用cookie\n```\ncurl -b ./cookie.txt  http://www.baidu.com/admin \n```\n## 模拟表单信息，模拟登录，保存cookie信息\n```\ncurl -c ./cookie_c.txt -F log=aaaa -F pwd=****** http://blog.51yip.com/wp-login.php  \n```\n## 模拟表单信息，模拟登录，保存头信息\n```\ncurl -D ./cookie_c.txt -F log=aaaa -F pwd=****** http://blog.51yip.com/wp-login.php  \n```","slug":"curl","published":1,"date":"2018-12-18T02:47:34.054Z","updated":"2019-05-15T06:50:01.380Z","layout":"post","photos":[],"link":"","_id":"cjvowxfnw0000sb92rdtsbpjy","content":"<h2 id=\"curl常用参数\"><a href=\"#curl常用参数\" class=\"headerlink\" title=\"curl常用参数\"></a>curl常用参数</h2><a id=\"more\"></a> \n<h2 id=\"o-输出到文件\"><a href=\"#o-输出到文件\" class=\"headerlink\" title=\"-o 输出到文件\"></a>-o 输出到文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o home.html  http://www.baidu.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"s-不输出任何东西\"><a href=\"#s-不输出任何东西\" class=\"headerlink\" title=\"-s 不输出任何东西\"></a>-s 不输出任何东西</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s</span><br></pre></td></tr></table></figure>\n<h2 id=\"进度条显示当前传送状态\"><a href=\"#进度条显示当前传送状态\" class=\"headerlink\" title=\"-# 进度条显示当前传送状态\"></a>-# 进度条显示当前传送状态</h2><h2 id=\"O-后面的url要具体到某个文件，不然抓不下来\"><a href=\"#O-后面的url要具体到某个文件，不然抓不下来\" class=\"headerlink\" title=\"-O 后面的url要具体到某个文件，不然抓不下来\"></a>-O 后面的url要具体到某个文件，不然抓不下来</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -# -O  http://www.baidu.com/1.jpg</span><br></pre></td></tr></table></figure>\n<h2 id=\"x-使用http代理\"><a href=\"#x-使用http代理\" class=\"headerlink\" title=\"-x 使用http代理\"></a>-x 使用http代理</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -x 24.10.28.84:32779 -o home.html http://www.baidu.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"断点续传，-C-大写的\"><a href=\"#断点续传，-C-大写的\" class=\"headerlink\" title=\"断点续传，-C(大写的)\"></a>断点续传，-C(大写的)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -C -O  http://www.baidu.com/1.jpg</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用cookie\"><a href=\"#使用cookie\" class=\"headerlink\" title=\"使用cookie\"></a>使用cookie</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -b ./cookie.txt  http://www.baidu.com/admin</span><br></pre></td></tr></table></figure>\n<h2 id=\"模拟表单信息，模拟登录，保存cookie信息\"><a href=\"#模拟表单信息，模拟登录，保存cookie信息\" class=\"headerlink\" title=\"模拟表单信息，模拟登录，保存cookie信息\"></a>模拟表单信息，模拟登录，保存cookie信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -c ./cookie_c.txt -F log=aaaa -F pwd=****** http://blog.51yip.com/wp-login.php</span><br></pre></td></tr></table></figure>\n<h2 id=\"模拟表单信息，模拟登录，保存头信息\"><a href=\"#模拟表单信息，模拟登录，保存头信息\" class=\"headerlink\" title=\"模拟表单信息，模拟登录，保存头信息\"></a>模拟表单信息，模拟登录，保存头信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -D ./cookie_c.txt -F log=aaaa -F pwd=****** http://blog.51yip.com/wp-login.php</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"curl常用参数\"><a href=\"#curl常用参数\" class=\"headerlink\" title=\"curl常用参数\"></a>curl常用参数</h2>","more":"<h2 id=\"o-输出到文件\"><a href=\"#o-输出到文件\" class=\"headerlink\" title=\"-o 输出到文件\"></a>-o 输出到文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o home.html  http://www.baidu.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"s-不输出任何东西\"><a href=\"#s-不输出任何东西\" class=\"headerlink\" title=\"-s 不输出任何东西\"></a>-s 不输出任何东西</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s</span><br></pre></td></tr></table></figure>\n<h2 id=\"进度条显示当前传送状态\"><a href=\"#进度条显示当前传送状态\" class=\"headerlink\" title=\"-# 进度条显示当前传送状态\"></a>-# 进度条显示当前传送状态</h2><h2 id=\"O-后面的url要具体到某个文件，不然抓不下来\"><a href=\"#O-后面的url要具体到某个文件，不然抓不下来\" class=\"headerlink\" title=\"-O 后面的url要具体到某个文件，不然抓不下来\"></a>-O 后面的url要具体到某个文件，不然抓不下来</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -# -O  http://www.baidu.com/1.jpg</span><br></pre></td></tr></table></figure>\n<h2 id=\"x-使用http代理\"><a href=\"#x-使用http代理\" class=\"headerlink\" title=\"-x 使用http代理\"></a>-x 使用http代理</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -x 24.10.28.84:32779 -o home.html http://www.baidu.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"断点续传，-C-大写的\"><a href=\"#断点续传，-C-大写的\" class=\"headerlink\" title=\"断点续传，-C(大写的)\"></a>断点续传，-C(大写的)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -C -O  http://www.baidu.com/1.jpg</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用cookie\"><a href=\"#使用cookie\" class=\"headerlink\" title=\"使用cookie\"></a>使用cookie</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -b ./cookie.txt  http://www.baidu.com/admin</span><br></pre></td></tr></table></figure>\n<h2 id=\"模拟表单信息，模拟登录，保存cookie信息\"><a href=\"#模拟表单信息，模拟登录，保存cookie信息\" class=\"headerlink\" title=\"模拟表单信息，模拟登录，保存cookie信息\"></a>模拟表单信息，模拟登录，保存cookie信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -c ./cookie_c.txt -F log=aaaa -F pwd=****** http://blog.51yip.com/wp-login.php</span><br></pre></td></tr></table></figure>\n<h2 id=\"模拟表单信息，模拟登录，保存头信息\"><a href=\"#模拟表单信息，模拟登录，保存头信息\" class=\"headerlink\" title=\"模拟表单信息，模拟登录，保存头信息\"></a>模拟表单信息，模拟登录，保存头信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -D ./cookie_c.txt -F log=aaaa -F pwd=****** http://blog.51yip.com/wp-login.php</span><br></pre></td></tr></table></figure>"},{"title":"atomic原子操作","comments":1,"_content":"### go的原子操作  \n\n<!-- more -->  \n\natomic 提供的原子操作能够确保任一时刻只有一个goroutine对变量进行操作，善用 atomic 能够避免程序中出现大量的锁操作。\n\n- atomic常见操作有：\n\n    - 增减  \n        第一个参数必须是指针类型的值，通过指针变量可以获取被操作数在内存中的地址，从而施加特殊的CPU指令，确保同一时间只有一个goroutine能够进行操作。\n        - func AddInt32(addr *int32, delta int32) (new int32)\n\n        - func AddInt64(addr *int64, delta int64) (new int64)\n\n        - func AddUint32(addr *uint32, delta uint32) (new uint32)\n\n        - func AddUint64(addr *uint64, delta uint64) (new uint64)\n\n        - func AddUintptr(addr *uintptr, delta uintptr) (new uintptr)\n        ```\n            var m int64=0\n            atomic.AddInt32(&m,3)\n\n        ```\n    - 载入  \n\n        载入操作能够保证原子的读变量的值，当读取的时候，任何其他CPU操作都无法对该变量进行读写，其实现机制受到底层硬件的支持。\n        - func LoadInt32(addr *int32) (val int32)\n\n        - func LoadInt64(addr *int64) (val int64)\n\n        - func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)\n\n        - func LoadUint32(addr *uint32) (val uint32)\n\n        - func LoadUint64(addr *uint64) (val uint64)\n\n        - func LoadUintptr(addr *uintptr) (val uintptr)\n    - 交换  \n\n        相对于CAS，明显此类操作更为暴力直接，并不管变量的旧值是否被改变，直接赋予新值然后返回背替换的值。\n        - unc SwapInt32(addr *int32, new int32) (old int32)\n\n        - func SwapInt64(addr *int64, new int64) (old int64)\n\n        - func SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)\n\n        - func SwapUint32(addr *uint32, new uint32) (old uint32)\n\n        - func SwapUint64(addr *uint64, new uint64) (old uint64)\n\n        - func SwapUintptr(addr *uintptr, new uintptr) (old uintptr)\n    - 比较并交换 \n        该操作在进行交换前首先确保变量的值未被更改，即仍然保持参数 old 所记录的值，满足此前提下才进行交换操作。CAS的做法类似操作数据库时常见的乐观锁机制。\n\n        需要注意的是，当有大量的goroutine 对变量进行读写操作时，可能导致CAS操作无法成功，这时可以利用for循环多次尝试。\n        \n        ```\n        var value int64\n        func atomicAddOp(tmp int64) {\n            for {\n                oldValue := value\n                if atomic.CompareAndSwapInt64(&value, oldValue, oldValue+tmp) {\n                    return\n                }\n            }\n        }\n        ```\n\n        - func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)\n\n        - func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)\n\n        - func CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)\n\n        - func CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool)\n\n        - func CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool)\n\n        - func CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool)\n    - 存储  \n        此类操作确保了写变量的原子性，避免其他操作读到了修改变量过程中的脏数据。\n\n        - func StoreInt32(addr *int32, val int32)\n\n        - func StoreInt64(addr *int64, val int64)\n\n        - func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)\n\n        - func StoreUint32(addr *uint32, val uint32)\n\n        - func StoreUint64(addr *uint64, val uint64)\n\n        - func StoreUintptr(addr *uintptr, val uintptr)","source":"_posts/atomic.md","raw":"---\ntitle: atomic原子操作\ncategories: \n- go\ntags:\n- atomic\ncomments: true\n---\n### go的原子操作  \n\n<!-- more -->  \n\natomic 提供的原子操作能够确保任一时刻只有一个goroutine对变量进行操作，善用 atomic 能够避免程序中出现大量的锁操作。\n\n- atomic常见操作有：\n\n    - 增减  \n        第一个参数必须是指针类型的值，通过指针变量可以获取被操作数在内存中的地址，从而施加特殊的CPU指令，确保同一时间只有一个goroutine能够进行操作。\n        - func AddInt32(addr *int32, delta int32) (new int32)\n\n        - func AddInt64(addr *int64, delta int64) (new int64)\n\n        - func AddUint32(addr *uint32, delta uint32) (new uint32)\n\n        - func AddUint64(addr *uint64, delta uint64) (new uint64)\n\n        - func AddUintptr(addr *uintptr, delta uintptr) (new uintptr)\n        ```\n            var m int64=0\n            atomic.AddInt32(&m,3)\n\n        ```\n    - 载入  \n\n        载入操作能够保证原子的读变量的值，当读取的时候，任何其他CPU操作都无法对该变量进行读写，其实现机制受到底层硬件的支持。\n        - func LoadInt32(addr *int32) (val int32)\n\n        - func LoadInt64(addr *int64) (val int64)\n\n        - func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)\n\n        - func LoadUint32(addr *uint32) (val uint32)\n\n        - func LoadUint64(addr *uint64) (val uint64)\n\n        - func LoadUintptr(addr *uintptr) (val uintptr)\n    - 交换  \n\n        相对于CAS，明显此类操作更为暴力直接，并不管变量的旧值是否被改变，直接赋予新值然后返回背替换的值。\n        - unc SwapInt32(addr *int32, new int32) (old int32)\n\n        - func SwapInt64(addr *int64, new int64) (old int64)\n\n        - func SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)\n\n        - func SwapUint32(addr *uint32, new uint32) (old uint32)\n\n        - func SwapUint64(addr *uint64, new uint64) (old uint64)\n\n        - func SwapUintptr(addr *uintptr, new uintptr) (old uintptr)\n    - 比较并交换 \n        该操作在进行交换前首先确保变量的值未被更改，即仍然保持参数 old 所记录的值，满足此前提下才进行交换操作。CAS的做法类似操作数据库时常见的乐观锁机制。\n\n        需要注意的是，当有大量的goroutine 对变量进行读写操作时，可能导致CAS操作无法成功，这时可以利用for循环多次尝试。\n        \n        ```\n        var value int64\n        func atomicAddOp(tmp int64) {\n            for {\n                oldValue := value\n                if atomic.CompareAndSwapInt64(&value, oldValue, oldValue+tmp) {\n                    return\n                }\n            }\n        }\n        ```\n\n        - func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)\n\n        - func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)\n\n        - func CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)\n\n        - func CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool)\n\n        - func CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool)\n\n        - func CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool)\n    - 存储  \n        此类操作确保了写变量的原子性，避免其他操作读到了修改变量过程中的脏数据。\n\n        - func StoreInt32(addr *int32, val int32)\n\n        - func StoreInt64(addr *int64, val int64)\n\n        - func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)\n\n        - func StoreUint32(addr *uint32, val uint32)\n\n        - func StoreUint64(addr *uint64, val uint64)\n\n        - func StoreUintptr(addr *uintptr, val uintptr)","slug":"atomic","published":1,"date":"2018-12-10T06:33:02.604Z","updated":"2019-05-15T06:50:13.677Z","layout":"post","photos":[],"link":"","_id":"cjvowxfo30002sb92k3xukklr","content":"<h3 id=\"go的原子操作\"><a href=\"#go的原子操作\" class=\"headerlink\" title=\"go的原子操作\"></a>go的原子操作</h3><a id=\"more\"></a>  \n<p>atomic 提供的原子操作能够确保任一时刻只有一个goroutine对变量进行操作，善用 atomic 能够避免程序中出现大量的锁操作。</p>\n<ul>\n<li><p>atomic常见操作有：</p>\n<ul>\n<li><p>增减<br>  第一个参数必须是指针类型的值，通过指针变量可以获取被操作数在内存中的地址，从而施加特殊的CPU指令，确保同一时间只有一个goroutine能够进行操作。</p>\n<ul>\n<li><p>func AddInt32(addr *int32, delta int32) (new int32)</p>\n</li>\n<li><p>func AddInt64(addr *int64, delta int64) (new int64)</p>\n</li>\n<li><p>func AddUint32(addr *uint32, delta uint32) (new uint32)</p>\n</li>\n<li><p>func AddUint64(addr *uint64, delta uint64) (new uint64)</p>\n</li>\n<li><p>func AddUintptr(addr *uintptr, delta uintptr) (new uintptr)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m int64=0</span><br><span class=\"line\">atomic.AddInt32(&amp;m,3)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>载入  </p>\n<p>  载入操作能够保证原子的读变量的值，当读取的时候，任何其他CPU操作都无法对该变量进行读写，其实现机制受到底层硬件的支持。</p>\n<ul>\n<li><p>func LoadInt32(addr *int32) (val int32)</p>\n</li>\n<li><p>func LoadInt64(addr *int64) (val int64)</p>\n</li>\n<li><p>func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)</p>\n</li>\n<li><p>func LoadUint32(addr *uint32) (val uint32)</p>\n</li>\n<li><p>func LoadUint64(addr *uint64) (val uint64)</p>\n</li>\n<li><p>func LoadUintptr(addr *uintptr) (val uintptr)</p>\n</li>\n</ul>\n</li>\n<li><p>交换  </p>\n<p>  相对于CAS，明显此类操作更为暴力直接，并不管变量的旧值是否被改变，直接赋予新值然后返回背替换的值。</p>\n<ul>\n<li><p>unc SwapInt32(addr *int32, new int32) (old int32)</p>\n</li>\n<li><p>func SwapInt64(addr *int64, new int64) (old int64)</p>\n</li>\n<li><p>func SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)</p>\n</li>\n<li><p>func SwapUint32(addr *uint32, new uint32) (old uint32)</p>\n</li>\n<li><p>func SwapUint64(addr *uint64, new uint64) (old uint64)</p>\n</li>\n<li><p>func SwapUintptr(addr *uintptr, new uintptr) (old uintptr)</p>\n</li>\n</ul>\n</li>\n<li><p>比较并交换<br>  该操作在进行交换前首先确保变量的值未被更改，即仍然保持参数 old 所记录的值，满足此前提下才进行交换操作。CAS的做法类似操作数据库时常见的乐观锁机制。</p>\n<p>  需要注意的是，当有大量的goroutine 对变量进行读写操作时，可能导致CAS操作无法成功，这时可以利用for循环多次尝试。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var value int64</span><br><span class=\"line\">func atomicAddOp(tmp int64) &#123;</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        oldValue := value</span><br><span class=\"line\">        if atomic.CompareAndSwapInt64(&amp;value, oldValue, oldValue+tmp) &#123;</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)</p>\n</li>\n<li><p>func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)</p>\n</li>\n<li><p>func CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)</p>\n</li>\n<li><p>func CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool)</p>\n</li>\n<li><p>func CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool)</p>\n</li>\n<li><p>func CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool)</p>\n</li>\n</ul>\n</li>\n<li><p>存储<br>  此类操作确保了写变量的原子性，避免其他操作读到了修改变量过程中的脏数据。</p>\n<ul>\n<li><p>func StoreInt32(addr *int32, val int32)</p>\n</li>\n<li><p>func StoreInt64(addr *int64, val int64)</p>\n</li>\n<li><p>func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)</p>\n</li>\n<li><p>func StoreUint32(addr *uint32, val uint32)</p>\n</li>\n<li><p>func StoreUint64(addr *uint64, val uint64)</p>\n</li>\n<li><p>func StoreUintptr(addr *uintptr, val uintptr)</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"go的原子操作\"><a href=\"#go的原子操作\" class=\"headerlink\" title=\"go的原子操作\"></a>go的原子操作</h3>","more":"<p>atomic 提供的原子操作能够确保任一时刻只有一个goroutine对变量进行操作，善用 atomic 能够避免程序中出现大量的锁操作。</p>\n<ul>\n<li><p>atomic常见操作有：</p>\n<ul>\n<li><p>增减<br>  第一个参数必须是指针类型的值，通过指针变量可以获取被操作数在内存中的地址，从而施加特殊的CPU指令，确保同一时间只有一个goroutine能够进行操作。</p>\n<ul>\n<li><p>func AddInt32(addr *int32, delta int32) (new int32)</p>\n</li>\n<li><p>func AddInt64(addr *int64, delta int64) (new int64)</p>\n</li>\n<li><p>func AddUint32(addr *uint32, delta uint32) (new uint32)</p>\n</li>\n<li><p>func AddUint64(addr *uint64, delta uint64) (new uint64)</p>\n</li>\n<li><p>func AddUintptr(addr *uintptr, delta uintptr) (new uintptr)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m int64=0</span><br><span class=\"line\">atomic.AddInt32(&amp;m,3)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>载入  </p>\n<p>  载入操作能够保证原子的读变量的值，当读取的时候，任何其他CPU操作都无法对该变量进行读写，其实现机制受到底层硬件的支持。</p>\n<ul>\n<li><p>func LoadInt32(addr *int32) (val int32)</p>\n</li>\n<li><p>func LoadInt64(addr *int64) (val int64)</p>\n</li>\n<li><p>func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)</p>\n</li>\n<li><p>func LoadUint32(addr *uint32) (val uint32)</p>\n</li>\n<li><p>func LoadUint64(addr *uint64) (val uint64)</p>\n</li>\n<li><p>func LoadUintptr(addr *uintptr) (val uintptr)</p>\n</li>\n</ul>\n</li>\n<li><p>交换  </p>\n<p>  相对于CAS，明显此类操作更为暴力直接，并不管变量的旧值是否被改变，直接赋予新值然后返回背替换的值。</p>\n<ul>\n<li><p>unc SwapInt32(addr *int32, new int32) (old int32)</p>\n</li>\n<li><p>func SwapInt64(addr *int64, new int64) (old int64)</p>\n</li>\n<li><p>func SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)</p>\n</li>\n<li><p>func SwapUint32(addr *uint32, new uint32) (old uint32)</p>\n</li>\n<li><p>func SwapUint64(addr *uint64, new uint64) (old uint64)</p>\n</li>\n<li><p>func SwapUintptr(addr *uintptr, new uintptr) (old uintptr)</p>\n</li>\n</ul>\n</li>\n<li><p>比较并交换<br>  该操作在进行交换前首先确保变量的值未被更改，即仍然保持参数 old 所记录的值，满足此前提下才进行交换操作。CAS的做法类似操作数据库时常见的乐观锁机制。</p>\n<p>  需要注意的是，当有大量的goroutine 对变量进行读写操作时，可能导致CAS操作无法成功，这时可以利用for循环多次尝试。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var value int64</span><br><span class=\"line\">func atomicAddOp(tmp int64) &#123;</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        oldValue := value</span><br><span class=\"line\">        if atomic.CompareAndSwapInt64(&amp;value, oldValue, oldValue+tmp) &#123;</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)</p>\n</li>\n<li><p>func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)</p>\n</li>\n<li><p>func CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)</p>\n</li>\n<li><p>func CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool)</p>\n</li>\n<li><p>func CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool)</p>\n</li>\n<li><p>func CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool)</p>\n</li>\n</ul>\n</li>\n<li><p>存储<br>  此类操作确保了写变量的原子性，避免其他操作读到了修改变量过程中的脏数据。</p>\n<ul>\n<li><p>func StoreInt32(addr *int32, val int32)</p>\n</li>\n<li><p>func StoreInt64(addr *int64, val int64)</p>\n</li>\n<li><p>func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)</p>\n</li>\n<li><p>func StoreUint32(addr *uint32, val uint32)</p>\n</li>\n<li><p>func StoreUint64(addr *uint64, val uint64)</p>\n</li>\n<li><p>func StoreUintptr(addr *uintptr, val uintptr)</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"gorutine和线程区别","comments":1,"_content":"\n- Go指南: https://tour.golang.org, https://tour.go-zh.org/\n- Go圣经: https://gopl.io, https://github.com/golang-china/gopl-zh\n- Go进阶: https://github.com/chai2010/advanced-go-programming-book\n\n<!-- more -->\n\n1. goroutine 比线程更轻量级，可以创建十万、百万不用担心资源问题。\n\n2. goroutine 和 chan 搭配使用，实现多线程、高并发 实现起来要方便很多。\n\n3. 线程的栈内存大小一般是固定的2M  gorutine的栈内存可变 初始大小2kb 随着需求可以扩大到1gb\n\n4. 从调度上讲，线程的调度由 OS 的内核完成；线程的切换需要CPU寄存器和内存的数据交换，从而切换不同的线程上下文。 其触发方式为 CPU时钟。而goroutine 的调度 则比较轻量级，由go自身的调度器完成；其只关心当前go程序内协程的调度；触发方式为 go内部的事件，time.sleep,通道阻塞，互斥量操作等\n","source":"_posts/gorutine.md","raw":"---\ntitle: gorutine和线程区别\ncategories: \n- go\ntags:\n- gorutine\ncomments: true\n---\n\n- Go指南: https://tour.golang.org, https://tour.go-zh.org/\n- Go圣经: https://gopl.io, https://github.com/golang-china/gopl-zh\n- Go进阶: https://github.com/chai2010/advanced-go-programming-book\n\n<!-- more -->\n\n1. goroutine 比线程更轻量级，可以创建十万、百万不用担心资源问题。\n\n2. goroutine 和 chan 搭配使用，实现多线程、高并发 实现起来要方便很多。\n\n3. 线程的栈内存大小一般是固定的2M  gorutine的栈内存可变 初始大小2kb 随着需求可以扩大到1gb\n\n4. 从调度上讲，线程的调度由 OS 的内核完成；线程的切换需要CPU寄存器和内存的数据交换，从而切换不同的线程上下文。 其触发方式为 CPU时钟。而goroutine 的调度 则比较轻量级，由go自身的调度器完成；其只关心当前go程序内协程的调度；触发方式为 go内部的事件，time.sleep,通道阻塞，互斥量操作等\n","slug":"gorutine","published":1,"date":"2019-04-15T02:45:57.147Z","updated":"2019-05-15T09:17:52.054Z","_id":"cjvowxfo80004sb92n8qvdhhy","layout":"post","photos":[],"link":"","content":"<ul>\n<li>Go指南: <a href=\"https://tour.golang.org\" target=\"_blank\" rel=\"noopener\">https://tour.golang.org</a>, <a href=\"https://tour.go-zh.org/\" target=\"_blank\" rel=\"noopener\">https://tour.go-zh.org/</a></li>\n<li>Go圣经: <a href=\"https://gopl.io\" target=\"_blank\" rel=\"noopener\">https://gopl.io</a>, <a href=\"https://github.com/golang-china/gopl-zh\" target=\"_blank\" rel=\"noopener\">https://github.com/golang-china/gopl-zh</a></li>\n<li>Go进阶: <a href=\"https://github.com/chai2010/advanced-go-programming-book\" target=\"_blank\" rel=\"noopener\">https://github.com/chai2010/advanced-go-programming-book</a></li>\n</ul>\n<a id=\"more\"></a>\n<ol>\n<li><p>goroutine 比线程更轻量级，可以创建十万、百万不用担心资源问题。</p>\n</li>\n<li><p>goroutine 和 chan 搭配使用，实现多线程、高并发 实现起来要方便很多。</p>\n</li>\n<li><p>线程的栈内存大小一般是固定的2M  gorutine的栈内存可变 初始大小2kb 随着需求可以扩大到1gb</p>\n</li>\n<li><p>从调度上讲，线程的调度由 OS 的内核完成；线程的切换需要CPU寄存器和内存的数据交换，从而切换不同的线程上下文。 其触发方式为 CPU时钟。而goroutine 的调度 则比较轻量级，由go自身的调度器完成；其只关心当前go程序内协程的调度；触发方式为 go内部的事件，time.sleep,通道阻塞，互斥量操作等</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<ul>\n<li>Go指南: <a href=\"https://tour.golang.org\" target=\"_blank\" rel=\"noopener\">https://tour.golang.org</a>, <a href=\"https://tour.go-zh.org/\" target=\"_blank\" rel=\"noopener\">https://tour.go-zh.org/</a></li>\n<li>Go圣经: <a href=\"https://gopl.io\" target=\"_blank\" rel=\"noopener\">https://gopl.io</a>, <a href=\"https://github.com/golang-china/gopl-zh\" target=\"_blank\" rel=\"noopener\">https://github.com/golang-china/gopl-zh</a></li>\n<li>Go进阶: <a href=\"https://github.com/chai2010/advanced-go-programming-book\" target=\"_blank\" rel=\"noopener\">https://github.com/chai2010/advanced-go-programming-book</a></li>\n</ul>","more":"<ol>\n<li><p>goroutine 比线程更轻量级，可以创建十万、百万不用担心资源问题。</p>\n</li>\n<li><p>goroutine 和 chan 搭配使用，实现多线程、高并发 实现起来要方便很多。</p>\n</li>\n<li><p>线程的栈内存大小一般是固定的2M  gorutine的栈内存可变 初始大小2kb 随着需求可以扩大到1gb</p>\n</li>\n<li><p>从调度上讲，线程的调度由 OS 的内核完成；线程的切换需要CPU寄存器和内存的数据交换，从而切换不同的线程上下文。 其触发方式为 CPU时钟。而goroutine 的调度 则比较轻量级，由go自身的调度器完成；其只关心当前go程序内协程的调度；触发方式为 go内部的事件，time.sleep,通道阻塞，互斥量操作等</p>\n</li>\n</ol>"},{"title":"my first blog","_content":"* welcome to my first blog, to be continued 。。。。。。","source":"_posts/first-blog.md","raw":"---\ntitle: my first blog\ncategories: \n- Hello\n---\n* welcome to my first blog, to be continued 。。。。。。","slug":"first-blog","published":1,"date":"2018-09-29T11:15:34.000Z","updated":"2019-03-26T09:47:37.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvowxfoa0006sb929cpza9bz","content":"<ul>\n<li>welcome to my first blog, to be continued 。。。。。。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>welcome to my first blog, to be continued 。。。。。。</li>\n</ul>\n"},{"title":"jq","comments":1,"_content":"### jq\n    jq可以对json数据进行分片、过滤、映射和转换，和sed、awk、grep等命令一样，都可以让你轻松地把玩文本\n\n<!-- more -->  \n\n### \".\"\n    最简单的jq程序是表达式\".\"\n    ```\n    cat json.text|jq .\n    ```\n    example\n    ```\n    {\n    \"name\": \"tool\",\n    \"url\": \"http://tool.china.com\",\n    \"addr\": {\n        \"city\": \"beijing\",\n        \"country\": \"china\"\n    },\n    \"array\": [\n        {\n        \"comp\": \"google\",\n        \"url\": \"http://www.google.com\"\n        },\n        {\n        \"comp\": \"baidu\",\n        \"url\": \"http://www.baidu.com\"\n        }\n    ]\n    }\n    ```\n### index\n    ```\n    cat json.text|jq '.[0]'\n    ```\n### 管道 |\n    ```\n    cat json.txt | jq '.[0] | {name:.name,city:.addr.city}'\n    ```\n    echo:\n\n    {\n        \"name\":\"jjj\",\n        \"city\":\"bj\"\n    }\n\n\n    ```\n    cat json.txt | jq '.[0] | {name:.array[0].comp,city:.addr.city}'\n    ```\n    echo:\n\n    {\n        \"name\":\"google\",\n        \"city\":\"bj\"\n    }\n### [] 把jq的输出当作一个数组\n\n### {} 自定义key\n    ```\n    cat json.txt | jq '.[0] | {username:.array[0].comp,livecity:.addr.city}'\n    ```","source":"_posts/jq.md","raw":"---\ntitle: jq\ncategories: \n- 工具\ntags:     \n- json文本处理 \ncomments: true\n---\n### jq\n    jq可以对json数据进行分片、过滤、映射和转换，和sed、awk、grep等命令一样，都可以让你轻松地把玩文本\n\n<!-- more -->  \n\n### \".\"\n    最简单的jq程序是表达式\".\"\n    ```\n    cat json.text|jq .\n    ```\n    example\n    ```\n    {\n    \"name\": \"tool\",\n    \"url\": \"http://tool.china.com\",\n    \"addr\": {\n        \"city\": \"beijing\",\n        \"country\": \"china\"\n    },\n    \"array\": [\n        {\n        \"comp\": \"google\",\n        \"url\": \"http://www.google.com\"\n        },\n        {\n        \"comp\": \"baidu\",\n        \"url\": \"http://www.baidu.com\"\n        }\n    ]\n    }\n    ```\n### index\n    ```\n    cat json.text|jq '.[0]'\n    ```\n### 管道 |\n    ```\n    cat json.txt | jq '.[0] | {name:.name,city:.addr.city}'\n    ```\n    echo:\n\n    {\n        \"name\":\"jjj\",\n        \"city\":\"bj\"\n    }\n\n\n    ```\n    cat json.txt | jq '.[0] | {name:.array[0].comp,city:.addr.city}'\n    ```\n    echo:\n\n    {\n        \"name\":\"google\",\n        \"city\":\"bj\"\n    }\n### [] 把jq的输出当作一个数组\n\n### {} 自定义key\n    ```\n    cat json.txt | jq '.[0] | {username:.array[0].comp,livecity:.addr.city}'\n    ```","slug":"jq","published":1,"date":"2018-12-18T02:42:57.210Z","updated":"2019-05-15T07:00:07.782Z","layout":"post","photos":[],"link":"","_id":"cjvowxfoc0007sb92za2gvkw8","content":"<h3 id=\"jq\"><a href=\"#jq\" class=\"headerlink\" title=\"jq\"></a>jq</h3><pre><code>jq可以对json数据进行分片、过滤、映射和转换，和sed、awk、grep等命令一样，都可以让你轻松地把玩文本\n</code></pre><a id=\"more\"></a>  \n<h3 id=\"“-”\"><a href=\"#“-”\" class=\"headerlink\" title=\"“.”\"></a>“.”</h3><pre><code>最简单的jq程序是表达式&quot;.&quot;\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat json.text|jq .</span><br></pre></td></tr></table></figure>\n\nexample\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;name&quot;: &quot;tool&quot;,</span><br><span class=\"line\">&quot;url&quot;: &quot;http://tool.china.com&quot;,</span><br><span class=\"line\">&quot;addr&quot;: &#123;</span><br><span class=\"line\">    &quot;city&quot;: &quot;beijing&quot;,</span><br><span class=\"line\">    &quot;country&quot;: &quot;china&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;array&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &quot;comp&quot;: &quot;google&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;http://www.google.com&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &quot;comp&quot;: &quot;baidu&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;http://www.baidu.com&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h3><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat json.text|jq &apos;.[0]&apos;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道 |\"></a>管道 |</h3><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat json.txt | jq &apos;.[0] | &#123;name:.name,city:.addr.city&#125;&apos;</span><br></pre></td></tr></table></figure>\n\necho:\n\n{\n    &quot;name&quot;:&quot;jjj&quot;,\n    &quot;city&quot;:&quot;bj&quot;\n}\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat json.txt | jq &apos;.[0] | &#123;name:.array[0].comp,city:.addr.city&#125;&apos;</span><br></pre></td></tr></table></figure>\n\necho:\n\n{\n    &quot;name&quot;:&quot;google&quot;,\n    &quot;city&quot;:&quot;bj&quot;\n}\n</code></pre><h3 id=\"把jq的输出当作一个数组\"><a href=\"#把jq的输出当作一个数组\" class=\"headerlink\" title=\"[] 把jq的输出当作一个数组\"></a>[] 把jq的输出当作一个数组</h3><h3 id=\"自定义key\"><a href=\"#自定义key\" class=\"headerlink\" title=\"{} 自定义key\"></a>{} 自定义key</h3><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat json.txt | jq &apos;.[0] | &#123;username:.array[0].comp,livecity:.addr.city&#125;&apos;</span><br></pre></td></tr></table></figure>\n</code></pre>","site":{"data":{}},"excerpt":"<h3 id=\"jq\"><a href=\"#jq\" class=\"headerlink\" title=\"jq\"></a>jq</h3><pre><code>jq可以对json数据进行分片、过滤、映射和转换，和sed、awk、grep等命令一样，都可以让你轻松地把玩文本\n</code></pre>","more":"<h3 id=\"“-”\"><a href=\"#“-”\" class=\"headerlink\" title=\"“.”\"></a>“.”</h3><pre><code>最简单的jq程序是表达式&quot;.&quot;\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat json.text|jq .</span><br></pre></td></tr></table></figure>\n\nexample\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;name&quot;: &quot;tool&quot;,</span><br><span class=\"line\">&quot;url&quot;: &quot;http://tool.china.com&quot;,</span><br><span class=\"line\">&quot;addr&quot;: &#123;</span><br><span class=\"line\">    &quot;city&quot;: &quot;beijing&quot;,</span><br><span class=\"line\">    &quot;country&quot;: &quot;china&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;array&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &quot;comp&quot;: &quot;google&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;http://www.google.com&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &quot;comp&quot;: &quot;baidu&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;http://www.baidu.com&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h3><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat json.text|jq &apos;.[0]&apos;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道 |\"></a>管道 |</h3><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat json.txt | jq &apos;.[0] | &#123;name:.name,city:.addr.city&#125;&apos;</span><br></pre></td></tr></table></figure>\n\necho:\n\n{\n    &quot;name&quot;:&quot;jjj&quot;,\n    &quot;city&quot;:&quot;bj&quot;\n}\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat json.txt | jq &apos;.[0] | &#123;name:.array[0].comp,city:.addr.city&#125;&apos;</span><br></pre></td></tr></table></figure>\n\necho:\n\n{\n    &quot;name&quot;:&quot;google&quot;,\n    &quot;city&quot;:&quot;bj&quot;\n}\n</code></pre><h3 id=\"把jq的输出当作一个数组\"><a href=\"#把jq的输出当作一个数组\" class=\"headerlink\" title=\"[] 把jq的输出当作一个数组\"></a>[] 把jq的输出当作一个数组</h3><h3 id=\"自定义key\"><a href=\"#自定义key\" class=\"headerlink\" title=\"{} 自定义key\"></a>{} 自定义key</h3><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat json.txt | jq &apos;.[0] | &#123;username:.array[0].comp,livecity:.addr.city&#125;&apos;</span><br></pre></td></tr></table></figure>\n</code></pre>"},{"title":"单链表","comments":1,"_content":"#### 单链表的创建、插入、删除 倒置\n\n<!-- more --> \n\n- go\n  \n```\n    type ListNode struct{\n        value int\n        next *ListNode\n    }\n    //创建单链表\n    func (this *ListNode)CreateList()*ListNode{\n        \n        head := new(ListNode)\n        ptail := new(ListNode)\n        ptail = head\n        for i :=0; i <= 10; i++{\n             xNode := new(ListNode)     \n             xNode.value = i\n             xNode.next = nil \n             ptail.next = xNode\n             ptail = xNode\n        }\n        head = head.next\n        ptail.next = nil\n        return head\n    }\n    //删除节点\n    func (this *ListNode)DeleteListNode(head* ListNode,val int){  \n        if head == nil{\n            return nil\n        }\n\n        temp := new(ListNode)\n        p := new(ListNode)\n        p = head\n        for p.next != nil && p.value != val{\n            temp = p\n            p = p.next\n        }\n        if p.value == val{\n            if p == head{\n                head = temp.next\n            }else{\n                temp.next = p.next\n            }\n        }\n        return head\n    }\n    //插入节点\n    func (this *ListNode)InsertNode(head* ListNode,val int)*ListNode{\n        if head == nil{\n            return\n        }\n        xNode := new(ListNode)\n        xNode.value = val\n        xNode.next = nil\n\n        temp := new(ListNode)\n        p := new(ListNode)\n        p = head\n        for p.next != nil && p.value < val{\n            temp = p\n            p = p.next\n        }\n        if p.value <= val{\n            if p == head{\n                head = xNode\n                xNode.next = p\n            }else{\n                temp.next = xNode\n                xNode.next = p\n            }\n\n        }else{\n            p.next = xNode\n            xNode.next = nil\n        }\n        return head\n    }\n    //链表倒置\n    func (this *ListNode)Reverse(head* ListNode)*ListNode{\n        if head==nil{\n            return nil\n        }\n        temp := new(ListNode)\n        p := new(ListNode)\n        p = head.next\n        head.next=nil\n        for p != nil{\n            temp = p.next\n            p.next = head\n            head = p\n            p = temp\n        }\n        return head\n    }\n```\n- c++\n\n```\n    struct ListNode{\n\n        ListNode *next;\n        int val;\n\n    }\n    class Solution{\n    public:\n        ListNode* CreateListNode(){\n\n            ListNode* head =new ListNode;\n            p = head;\n            for (int i =0; i <10; i++){\n                ListNode* node =new ListNode;\n                node -> next =NULL;\n                node -> val = i;\n                p->next = node;\n                p = node;\n            }\n            head = head->next;\n            p->next = NULL;\n            return head;\n\n        }\n        ListNode* DeletedListNode(ListNode* head,int val){\n            if head == NULL{\n                return NULL;\n            }\n            ListNode* temp = NULL;\n            ListNode* p = head;\n            while(p->next != NULL && p->val != val){\n                temp = p;\n                p = p->next;\n            }\n            if (p->val == val){\n                if (p == head){\n                    head = p->next;\n                    delete p;\n                }\n                else{\n                    temp->next = p->next;\n                    delete p;\n                }\n            }\n            return head;\n        }\n        ListNode* InsertListNode(ListNode* head,int val){\n\n            ListNode* p = head;\n            ListNode* temp = NULL;\n\n            ListNode* node = new ListNode;\n            node->val = val;\n\n            while(p->next != NULL && p->val < node->val){\n                temp = p;\n                p= p->next;\n            }\n            if (node->val <= p->val){\n                if (p == head){//头部插入\n                    head = node;\n                    node -> next = p;\n                }else{//中间插入\n                    temp -> next = node;\n                    node -> next = p;\n                }\n            }else{//链表尾部插入\n                p->next = node;\n                node->next = NULL;\n            }\n            return head;\n        }\n        ListNode* ReverseListNode(ListNode* head){\n            if (head == NULL){\n                return NULL;\n            }\n            ListNode* temp = NULL;\n            ListNode* p = head;\n            head->next = NULL;\n            while(p!=NULL){\n                temp = p->next;\n                p->next = head;\n                head = p;\n                p = temp;\n            }\n            return head;\n        }\n        ListNode* DeleteListNode(ListNode* head,int val){\n\n            if (head == NULL) return NULL;\n            ListNode* temp = NULL;\n            ListNode* p = head;\n            while(val < p->val && p->next !=NULL){\n            temp = p;\n            p = p->next; \n            }\n            if (p->val == val){\n                if (p == head){\n                head = p->next;\n                delete p;\n                }else{\n                    temp->next = p->next;\n                    delete p;\n                }\n            }\n        return head;\n        }\n        ListNode* InsertListNode(ListNode* head,int val){\n            \n            ListNode* temp = NULL;\n            ListNode* p = head;\n\n            ListNode* newNode = new ListNode;\n            newNode->val = val;\n\n            while(val < p->val && p->next !=NULL){\n            temp = p;\n            p = p->next; \n            }\n            if (p->val <= newNode->val ){\n                if(p == head){\n                    head = newNode;\n                    newNode->next = p; \n                }else{\n                    temp->next = newNode;\n                    newNode->next = p;\n                }\n\n            }else{//尾部插入\n                p->next = newNode;\n                newNode->next = NULL;\n            }\n        }\n    }\n```","source":"_posts/list.md","raw":"---\ntitle: 单链表\ncategories: \n- 数据结构\ntags:   链表 \ncomments: true\n---\n#### 单链表的创建、插入、删除 倒置\n\n<!-- more --> \n\n- go\n  \n```\n    type ListNode struct{\n        value int\n        next *ListNode\n    }\n    //创建单链表\n    func (this *ListNode)CreateList()*ListNode{\n        \n        head := new(ListNode)\n        ptail := new(ListNode)\n        ptail = head\n        for i :=0; i <= 10; i++{\n             xNode := new(ListNode)     \n             xNode.value = i\n             xNode.next = nil \n             ptail.next = xNode\n             ptail = xNode\n        }\n        head = head.next\n        ptail.next = nil\n        return head\n    }\n    //删除节点\n    func (this *ListNode)DeleteListNode(head* ListNode,val int){  \n        if head == nil{\n            return nil\n        }\n\n        temp := new(ListNode)\n        p := new(ListNode)\n        p = head\n        for p.next != nil && p.value != val{\n            temp = p\n            p = p.next\n        }\n        if p.value == val{\n            if p == head{\n                head = temp.next\n            }else{\n                temp.next = p.next\n            }\n        }\n        return head\n    }\n    //插入节点\n    func (this *ListNode)InsertNode(head* ListNode,val int)*ListNode{\n        if head == nil{\n            return\n        }\n        xNode := new(ListNode)\n        xNode.value = val\n        xNode.next = nil\n\n        temp := new(ListNode)\n        p := new(ListNode)\n        p = head\n        for p.next != nil && p.value < val{\n            temp = p\n            p = p.next\n        }\n        if p.value <= val{\n            if p == head{\n                head = xNode\n                xNode.next = p\n            }else{\n                temp.next = xNode\n                xNode.next = p\n            }\n\n        }else{\n            p.next = xNode\n            xNode.next = nil\n        }\n        return head\n    }\n    //链表倒置\n    func (this *ListNode)Reverse(head* ListNode)*ListNode{\n        if head==nil{\n            return nil\n        }\n        temp := new(ListNode)\n        p := new(ListNode)\n        p = head.next\n        head.next=nil\n        for p != nil{\n            temp = p.next\n            p.next = head\n            head = p\n            p = temp\n        }\n        return head\n    }\n```\n- c++\n\n```\n    struct ListNode{\n\n        ListNode *next;\n        int val;\n\n    }\n    class Solution{\n    public:\n        ListNode* CreateListNode(){\n\n            ListNode* head =new ListNode;\n            p = head;\n            for (int i =0; i <10; i++){\n                ListNode* node =new ListNode;\n                node -> next =NULL;\n                node -> val = i;\n                p->next = node;\n                p = node;\n            }\n            head = head->next;\n            p->next = NULL;\n            return head;\n\n        }\n        ListNode* DeletedListNode(ListNode* head,int val){\n            if head == NULL{\n                return NULL;\n            }\n            ListNode* temp = NULL;\n            ListNode* p = head;\n            while(p->next != NULL && p->val != val){\n                temp = p;\n                p = p->next;\n            }\n            if (p->val == val){\n                if (p == head){\n                    head = p->next;\n                    delete p;\n                }\n                else{\n                    temp->next = p->next;\n                    delete p;\n                }\n            }\n            return head;\n        }\n        ListNode* InsertListNode(ListNode* head,int val){\n\n            ListNode* p = head;\n            ListNode* temp = NULL;\n\n            ListNode* node = new ListNode;\n            node->val = val;\n\n            while(p->next != NULL && p->val < node->val){\n                temp = p;\n                p= p->next;\n            }\n            if (node->val <= p->val){\n                if (p == head){//头部插入\n                    head = node;\n                    node -> next = p;\n                }else{//中间插入\n                    temp -> next = node;\n                    node -> next = p;\n                }\n            }else{//链表尾部插入\n                p->next = node;\n                node->next = NULL;\n            }\n            return head;\n        }\n        ListNode* ReverseListNode(ListNode* head){\n            if (head == NULL){\n                return NULL;\n            }\n            ListNode* temp = NULL;\n            ListNode* p = head;\n            head->next = NULL;\n            while(p!=NULL){\n                temp = p->next;\n                p->next = head;\n                head = p;\n                p = temp;\n            }\n            return head;\n        }\n        ListNode* DeleteListNode(ListNode* head,int val){\n\n            if (head == NULL) return NULL;\n            ListNode* temp = NULL;\n            ListNode* p = head;\n            while(val < p->val && p->next !=NULL){\n            temp = p;\n            p = p->next; \n            }\n            if (p->val == val){\n                if (p == head){\n                head = p->next;\n                delete p;\n                }else{\n                    temp->next = p->next;\n                    delete p;\n                }\n            }\n        return head;\n        }\n        ListNode* InsertListNode(ListNode* head,int val){\n            \n            ListNode* temp = NULL;\n            ListNode* p = head;\n\n            ListNode* newNode = new ListNode;\n            newNode->val = val;\n\n            while(val < p->val && p->next !=NULL){\n            temp = p;\n            p = p->next; \n            }\n            if (p->val <= newNode->val ){\n                if(p == head){\n                    head = newNode;\n                    newNode->next = p; \n                }else{\n                    temp->next = newNode;\n                    newNode->next = p;\n                }\n\n            }else{//尾部插入\n                p->next = newNode;\n                newNode->next = NULL;\n            }\n        }\n    }\n```","slug":"list","published":1,"date":"2018-10-25T12:06:46.000Z","updated":"2019-05-15T03:55:50.403Z","layout":"post","photos":[],"link":"","_id":"cjvowxfoe0009sb92qa6kzgh2","content":"<h4 id=\"单链表的创建、插入、删除-倒置\"><a href=\"#单链表的创建、插入、删除-倒置\" class=\"headerlink\" title=\"单链表的创建、插入、删除 倒置\"></a>单链表的创建、插入、删除 倒置</h4><a id=\"more\"></a> \n<ul>\n<li>go</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type ListNode struct&#123;</span><br><span class=\"line\">    value int</span><br><span class=\"line\">    next *ListNode</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//创建单链表</span><br><span class=\"line\">func (this *ListNode)CreateList()*ListNode&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    head := new(ListNode)</span><br><span class=\"line\">    ptail := new(ListNode)</span><br><span class=\"line\">    ptail = head</span><br><span class=\"line\">    for i :=0; i &lt;= 10; i++&#123;</span><br><span class=\"line\">         xNode := new(ListNode)     </span><br><span class=\"line\">         xNode.value = i</span><br><span class=\"line\">         xNode.next = nil </span><br><span class=\"line\">         ptail.next = xNode</span><br><span class=\"line\">         ptail = xNode</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    head = head.next</span><br><span class=\"line\">    ptail.next = nil</span><br><span class=\"line\">    return head</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//删除节点</span><br><span class=\"line\">func (this *ListNode)DeleteListNode(head* ListNode,val int)&#123;  </span><br><span class=\"line\">    if head == nil&#123;</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    temp := new(ListNode)</span><br><span class=\"line\">    p := new(ListNode)</span><br><span class=\"line\">    p = head</span><br><span class=\"line\">    for p.next != nil &amp;&amp; p.value != val&#123;</span><br><span class=\"line\">        temp = p</span><br><span class=\"line\">        p = p.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if p.value == val&#123;</span><br><span class=\"line\">        if p == head&#123;</span><br><span class=\"line\">            head = temp.next</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            temp.next = p.next</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return head</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//插入节点</span><br><span class=\"line\">func (this *ListNode)InsertNode(head* ListNode,val int)*ListNode&#123;</span><br><span class=\"line\">    if head == nil&#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xNode := new(ListNode)</span><br><span class=\"line\">    xNode.value = val</span><br><span class=\"line\">    xNode.next = nil</span><br><span class=\"line\"></span><br><span class=\"line\">    temp := new(ListNode)</span><br><span class=\"line\">    p := new(ListNode)</span><br><span class=\"line\">    p = head</span><br><span class=\"line\">    for p.next != nil &amp;&amp; p.value &lt; val&#123;</span><br><span class=\"line\">        temp = p</span><br><span class=\"line\">        p = p.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if p.value &lt;= val&#123;</span><br><span class=\"line\">        if p == head&#123;</span><br><span class=\"line\">            head = xNode</span><br><span class=\"line\">            xNode.next = p</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            temp.next = xNode</span><br><span class=\"line\">            xNode.next = p</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        p.next = xNode</span><br><span class=\"line\">        xNode.next = nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return head</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//链表倒置</span><br><span class=\"line\">func (this *ListNode)Reverse(head* ListNode)*ListNode&#123;</span><br><span class=\"line\">    if head==nil&#123;</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp := new(ListNode)</span><br><span class=\"line\">    p := new(ListNode)</span><br><span class=\"line\">    p = head.next</span><br><span class=\"line\">    head.next=nil</span><br><span class=\"line\">    for p != nil&#123;</span><br><span class=\"line\">        temp = p.next</span><br><span class=\"line\">        p.next = head</span><br><span class=\"line\">        head = p</span><br><span class=\"line\">        p = temp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return head</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>c++</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct ListNode&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode *next;</span><br><span class=\"line\">    int val;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Solution&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    ListNode* CreateListNode()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode* head =new ListNode;</span><br><span class=\"line\">        p = head;</span><br><span class=\"line\">        for (int i =0; i &lt;10; i++)&#123;</span><br><span class=\"line\">            ListNode* node =new ListNode;</span><br><span class=\"line\">            node -&gt; next =NULL;</span><br><span class=\"line\">            node -&gt; val = i;</span><br><span class=\"line\">            p-&gt;next = node;</span><br><span class=\"line\">            p = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">        p-&gt;next = NULL;</span><br><span class=\"line\">        return head;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode* DeletedListNode(ListNode* head,int val)&#123;</span><br><span class=\"line\">        if head == NULL&#123;</span><br><span class=\"line\">            return NULL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode* temp = NULL;</span><br><span class=\"line\">        ListNode* p = head;</span><br><span class=\"line\">        while(p-&gt;next != NULL &amp;&amp; p-&gt;val != val)&#123;</span><br><span class=\"line\">            temp = p;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (p-&gt;val == val)&#123;</span><br><span class=\"line\">            if (p == head)&#123;</span><br><span class=\"line\">                head = p-&gt;next;</span><br><span class=\"line\">                delete p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                temp-&gt;next = p-&gt;next;</span><br><span class=\"line\">                delete p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode* InsertListNode(ListNode* head,int val)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode* p = head;</span><br><span class=\"line\">        ListNode* temp = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode* node = new ListNode;</span><br><span class=\"line\">        node-&gt;val = val;</span><br><span class=\"line\"></span><br><span class=\"line\">        while(p-&gt;next != NULL &amp;&amp; p-&gt;val &lt; node-&gt;val)&#123;</span><br><span class=\"line\">            temp = p;</span><br><span class=\"line\">            p= p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (node-&gt;val &lt;= p-&gt;val)&#123;</span><br><span class=\"line\">            if (p == head)&#123;//头部插入</span><br><span class=\"line\">                head = node;</span><br><span class=\"line\">                node -&gt; next = p;</span><br><span class=\"line\">            &#125;else&#123;//中间插入</span><br><span class=\"line\">                temp -&gt; next = node;</span><br><span class=\"line\">                node -&gt; next = p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;else&#123;//链表尾部插入</span><br><span class=\"line\">            p-&gt;next = node;</span><br><span class=\"line\">            node-&gt;next = NULL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode* ReverseListNode(ListNode* head)&#123;</span><br><span class=\"line\">        if (head == NULL)&#123;</span><br><span class=\"line\">            return NULL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode* temp = NULL;</span><br><span class=\"line\">        ListNode* p = head;</span><br><span class=\"line\">        head-&gt;next = NULL;</span><br><span class=\"line\">        while(p!=NULL)&#123;</span><br><span class=\"line\">            temp = p-&gt;next;</span><br><span class=\"line\">            p-&gt;next = head;</span><br><span class=\"line\">            head = p;</span><br><span class=\"line\">            p = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode* DeleteListNode(ListNode* head,int val)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (head == NULL) return NULL;</span><br><span class=\"line\">        ListNode* temp = NULL;</span><br><span class=\"line\">        ListNode* p = head;</span><br><span class=\"line\">        while(val &lt; p-&gt;val &amp;&amp; p-&gt;next !=NULL)&#123;</span><br><span class=\"line\">        temp = p;</span><br><span class=\"line\">        p = p-&gt;next; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (p-&gt;val == val)&#123;</span><br><span class=\"line\">            if (p == head)&#123;</span><br><span class=\"line\">            head = p-&gt;next;</span><br><span class=\"line\">            delete p;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                temp-&gt;next = p-&gt;next;</span><br><span class=\"line\">                delete p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode* InsertListNode(ListNode* head,int val)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ListNode* temp = NULL;</span><br><span class=\"line\">        ListNode* p = head;</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode* newNode = new ListNode;</span><br><span class=\"line\">        newNode-&gt;val = val;</span><br><span class=\"line\"></span><br><span class=\"line\">        while(val &lt; p-&gt;val &amp;&amp; p-&gt;next !=NULL)&#123;</span><br><span class=\"line\">        temp = p;</span><br><span class=\"line\">        p = p-&gt;next; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (p-&gt;val &lt;= newNode-&gt;val )&#123;</span><br><span class=\"line\">            if(p == head)&#123;</span><br><span class=\"line\">                head = newNode;</span><br><span class=\"line\">                newNode-&gt;next = p; </span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                temp-&gt;next = newNode;</span><br><span class=\"line\">                newNode-&gt;next = p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;//尾部插入</span><br><span class=\"line\">            p-&gt;next = newNode;</span><br><span class=\"line\">            newNode-&gt;next = NULL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"单链表的创建、插入、删除-倒置\"><a href=\"#单链表的创建、插入、删除-倒置\" class=\"headerlink\" title=\"单链表的创建、插入、删除 倒置\"></a>单链表的创建、插入、删除 倒置</h4>","more":"<ul>\n<li>go</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type ListNode struct&#123;</span><br><span class=\"line\">    value int</span><br><span class=\"line\">    next *ListNode</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//创建单链表</span><br><span class=\"line\">func (this *ListNode)CreateList()*ListNode&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    head := new(ListNode)</span><br><span class=\"line\">    ptail := new(ListNode)</span><br><span class=\"line\">    ptail = head</span><br><span class=\"line\">    for i :=0; i &lt;= 10; i++&#123;</span><br><span class=\"line\">         xNode := new(ListNode)     </span><br><span class=\"line\">         xNode.value = i</span><br><span class=\"line\">         xNode.next = nil </span><br><span class=\"line\">         ptail.next = xNode</span><br><span class=\"line\">         ptail = xNode</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    head = head.next</span><br><span class=\"line\">    ptail.next = nil</span><br><span class=\"line\">    return head</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//删除节点</span><br><span class=\"line\">func (this *ListNode)DeleteListNode(head* ListNode,val int)&#123;  </span><br><span class=\"line\">    if head == nil&#123;</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    temp := new(ListNode)</span><br><span class=\"line\">    p := new(ListNode)</span><br><span class=\"line\">    p = head</span><br><span class=\"line\">    for p.next != nil &amp;&amp; p.value != val&#123;</span><br><span class=\"line\">        temp = p</span><br><span class=\"line\">        p = p.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if p.value == val&#123;</span><br><span class=\"line\">        if p == head&#123;</span><br><span class=\"line\">            head = temp.next</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            temp.next = p.next</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return head</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//插入节点</span><br><span class=\"line\">func (this *ListNode)InsertNode(head* ListNode,val int)*ListNode&#123;</span><br><span class=\"line\">    if head == nil&#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xNode := new(ListNode)</span><br><span class=\"line\">    xNode.value = val</span><br><span class=\"line\">    xNode.next = nil</span><br><span class=\"line\"></span><br><span class=\"line\">    temp := new(ListNode)</span><br><span class=\"line\">    p := new(ListNode)</span><br><span class=\"line\">    p = head</span><br><span class=\"line\">    for p.next != nil &amp;&amp; p.value &lt; val&#123;</span><br><span class=\"line\">        temp = p</span><br><span class=\"line\">        p = p.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if p.value &lt;= val&#123;</span><br><span class=\"line\">        if p == head&#123;</span><br><span class=\"line\">            head = xNode</span><br><span class=\"line\">            xNode.next = p</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            temp.next = xNode</span><br><span class=\"line\">            xNode.next = p</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        p.next = xNode</span><br><span class=\"line\">        xNode.next = nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return head</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//链表倒置</span><br><span class=\"line\">func (this *ListNode)Reverse(head* ListNode)*ListNode&#123;</span><br><span class=\"line\">    if head==nil&#123;</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp := new(ListNode)</span><br><span class=\"line\">    p := new(ListNode)</span><br><span class=\"line\">    p = head.next</span><br><span class=\"line\">    head.next=nil</span><br><span class=\"line\">    for p != nil&#123;</span><br><span class=\"line\">        temp = p.next</span><br><span class=\"line\">        p.next = head</span><br><span class=\"line\">        head = p</span><br><span class=\"line\">        p = temp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return head</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>c++</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct ListNode&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode *next;</span><br><span class=\"line\">    int val;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Solution&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    ListNode* CreateListNode()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode* head =new ListNode;</span><br><span class=\"line\">        p = head;</span><br><span class=\"line\">        for (int i =0; i &lt;10; i++)&#123;</span><br><span class=\"line\">            ListNode* node =new ListNode;</span><br><span class=\"line\">            node -&gt; next =NULL;</span><br><span class=\"line\">            node -&gt; val = i;</span><br><span class=\"line\">            p-&gt;next = node;</span><br><span class=\"line\">            p = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">        p-&gt;next = NULL;</span><br><span class=\"line\">        return head;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode* DeletedListNode(ListNode* head,int val)&#123;</span><br><span class=\"line\">        if head == NULL&#123;</span><br><span class=\"line\">            return NULL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode* temp = NULL;</span><br><span class=\"line\">        ListNode* p = head;</span><br><span class=\"line\">        while(p-&gt;next != NULL &amp;&amp; p-&gt;val != val)&#123;</span><br><span class=\"line\">            temp = p;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (p-&gt;val == val)&#123;</span><br><span class=\"line\">            if (p == head)&#123;</span><br><span class=\"line\">                head = p-&gt;next;</span><br><span class=\"line\">                delete p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                temp-&gt;next = p-&gt;next;</span><br><span class=\"line\">                delete p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode* InsertListNode(ListNode* head,int val)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode* p = head;</span><br><span class=\"line\">        ListNode* temp = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode* node = new ListNode;</span><br><span class=\"line\">        node-&gt;val = val;</span><br><span class=\"line\"></span><br><span class=\"line\">        while(p-&gt;next != NULL &amp;&amp; p-&gt;val &lt; node-&gt;val)&#123;</span><br><span class=\"line\">            temp = p;</span><br><span class=\"line\">            p= p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (node-&gt;val &lt;= p-&gt;val)&#123;</span><br><span class=\"line\">            if (p == head)&#123;//头部插入</span><br><span class=\"line\">                head = node;</span><br><span class=\"line\">                node -&gt; next = p;</span><br><span class=\"line\">            &#125;else&#123;//中间插入</span><br><span class=\"line\">                temp -&gt; next = node;</span><br><span class=\"line\">                node -&gt; next = p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;else&#123;//链表尾部插入</span><br><span class=\"line\">            p-&gt;next = node;</span><br><span class=\"line\">            node-&gt;next = NULL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode* ReverseListNode(ListNode* head)&#123;</span><br><span class=\"line\">        if (head == NULL)&#123;</span><br><span class=\"line\">            return NULL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode* temp = NULL;</span><br><span class=\"line\">        ListNode* p = head;</span><br><span class=\"line\">        head-&gt;next = NULL;</span><br><span class=\"line\">        while(p!=NULL)&#123;</span><br><span class=\"line\">            temp = p-&gt;next;</span><br><span class=\"line\">            p-&gt;next = head;</span><br><span class=\"line\">            head = p;</span><br><span class=\"line\">            p = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode* DeleteListNode(ListNode* head,int val)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (head == NULL) return NULL;</span><br><span class=\"line\">        ListNode* temp = NULL;</span><br><span class=\"line\">        ListNode* p = head;</span><br><span class=\"line\">        while(val &lt; p-&gt;val &amp;&amp; p-&gt;next !=NULL)&#123;</span><br><span class=\"line\">        temp = p;</span><br><span class=\"line\">        p = p-&gt;next; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (p-&gt;val == val)&#123;</span><br><span class=\"line\">            if (p == head)&#123;</span><br><span class=\"line\">            head = p-&gt;next;</span><br><span class=\"line\">            delete p;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                temp-&gt;next = p-&gt;next;</span><br><span class=\"line\">                delete p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode* InsertListNode(ListNode* head,int val)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ListNode* temp = NULL;</span><br><span class=\"line\">        ListNode* p = head;</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode* newNode = new ListNode;</span><br><span class=\"line\">        newNode-&gt;val = val;</span><br><span class=\"line\"></span><br><span class=\"line\">        while(val &lt; p-&gt;val &amp;&amp; p-&gt;next !=NULL)&#123;</span><br><span class=\"line\">        temp = p;</span><br><span class=\"line\">        p = p-&gt;next; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (p-&gt;val &lt;= newNode-&gt;val )&#123;</span><br><span class=\"line\">            if(p == head)&#123;</span><br><span class=\"line\">                head = newNode;</span><br><span class=\"line\">                newNode-&gt;next = p; </span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                temp-&gt;next = newNode;</span><br><span class=\"line\">                newNode-&gt;next = p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;//尾部插入</span><br><span class=\"line\">            p-&gt;next = newNode;</span><br><span class=\"line\">            newNode-&gt;next = NULL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"http相关特性","comments":1,"_content":"\n### http通信的过程\n\n<!-- more -->\n\n(1) 建立tcp链接  \n(2) web浏览器向web服务器发送请求命令  \n(3) web浏览器发送请求头消息  \n(4) web服务器应答  \n(5) web服务器发送应答头消息  \n(6) web服务器向浏览器发送数据  \n(7) web服务器关闭tcp链接  \n\n### HTTP2.0和HTTP1.X相比的新特性\n\n1.新的二进制格式（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。\n\n2.多路复用（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。\n\n3.header压缩，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。\n\n4.服务端推送（server push），同SPDY一样，HTTP2.0也具有server push功能。\n\n### http url 字符含义\n\n* URL特殊符号及对应的十六进制值编码：  \n\n    (1)'+'     URL中+号表示空格                  %2B  \n\n    (2)空格     URL中的空格可以用+号或者编码        %20  \n\n    (3)/       分隔目录和子目录                   %2F  \n\n    (4)?       分隔实际的 URL 和参数              %3F  \n\n    (5)%       指定特殊字符                      %25  \n\n    (6)'#'       表示书签                       %23  \n\n    (7)&       URL中指定的参数间的分隔符           %26  \n\n    (8)=       URL中指定参数的值                 %3D   \n\n### http和https区别  \n  \n- HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL  \n- HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少    \n- http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议  \n- http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443  \n- http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全  \n\n### 无连接、无状态  \n\n- 无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。  \n\n- 无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。即我们给服务器发送 HTTP 请求之后，服务器根据请求，会给我们发送数据过来，但是，发送完，不会记录任何信息。\n\n### get 和post区别\n\n- GET后退按钮/刷新无害，POST数据会被重新提交（浏览器应该告知用户数据会被重新提交）。  \n- GET书签可收藏，POST为书签不可收藏。GET能被缓存，POST不能缓存 。  \n- GET编码类型application/x-www-form-url，POST编码类型encodedapplication/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。  \n- GET历史参数保留在浏览器历史中。POST参数不会保存在浏览器历史中。    \n- GET对数据长度有限制，当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。POST无限制。    \n- GET只允许 ASCII 字符。POST没有限制。也允许二进制数据。     \n- 与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。GET的数据在 URL 中对所有人都是可见的。POST的数据不会显示在 URL 中。\n","source":"_posts/http.md","raw":"---\ntitle: http相关特性\ncategories: \n- 协议\ntags: \ncomments: true\n---\n\n### http通信的过程\n\n<!-- more -->\n\n(1) 建立tcp链接  \n(2) web浏览器向web服务器发送请求命令  \n(3) web浏览器发送请求头消息  \n(4) web服务器应答  \n(5) web服务器发送应答头消息  \n(6) web服务器向浏览器发送数据  \n(7) web服务器关闭tcp链接  \n\n### HTTP2.0和HTTP1.X相比的新特性\n\n1.新的二进制格式（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。\n\n2.多路复用（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。\n\n3.header压缩，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。\n\n4.服务端推送（server push），同SPDY一样，HTTP2.0也具有server push功能。\n\n### http url 字符含义\n\n* URL特殊符号及对应的十六进制值编码：  \n\n    (1)'+'     URL中+号表示空格                  %2B  \n\n    (2)空格     URL中的空格可以用+号或者编码        %20  \n\n    (3)/       分隔目录和子目录                   %2F  \n\n    (4)?       分隔实际的 URL 和参数              %3F  \n\n    (5)%       指定特殊字符                      %25  \n\n    (6)'#'       表示书签                       %23  \n\n    (7)&       URL中指定的参数间的分隔符           %26  \n\n    (8)=       URL中指定参数的值                 %3D   \n\n### http和https区别  \n  \n- HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL  \n- HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少    \n- http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议  \n- http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443  \n- http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全  \n\n### 无连接、无状态  \n\n- 无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。  \n\n- 无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。即我们给服务器发送 HTTP 请求之后，服务器根据请求，会给我们发送数据过来，但是，发送完，不会记录任何信息。\n\n### get 和post区别\n\n- GET后退按钮/刷新无害，POST数据会被重新提交（浏览器应该告知用户数据会被重新提交）。  \n- GET书签可收藏，POST为书签不可收藏。GET能被缓存，POST不能缓存 。  \n- GET编码类型application/x-www-form-url，POST编码类型encodedapplication/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。  \n- GET历史参数保留在浏览器历史中。POST参数不会保存在浏览器历史中。    \n- GET对数据长度有限制，当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。POST无限制。    \n- GET只允许 ASCII 字符。POST没有限制。也允许二进制数据。     \n- 与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。GET的数据在 URL 中对所有人都是可见的。POST的数据不会显示在 URL 中。\n","slug":"http","published":1,"date":"2018-10-25T11:46:38.000Z","updated":"2019-05-15T09:55:53.071Z","_id":"cjvowxfof000csb92n9fxazwn","layout":"post","photos":[],"link":"","content":"<h3 id=\"http通信的过程\"><a href=\"#http通信的过程\" class=\"headerlink\" title=\"http通信的过程\"></a>http通信的过程</h3><a id=\"more\"></a>\n<p>(1) 建立tcp链接<br>(2) web浏览器向web服务器发送请求命令<br>(3) web浏览器发送请求头消息<br>(4) web服务器应答<br>(5) web服务器发送应答头消息<br>(6) web服务器向浏览器发送数据<br>(7) web服务器关闭tcp链接  </p>\n<h3 id=\"HTTP2-0和HTTP1-X相比的新特性\"><a href=\"#HTTP2-0和HTTP1-X相比的新特性\" class=\"headerlink\" title=\"HTTP2.0和HTTP1.X相比的新特性\"></a>HTTP2.0和HTTP1.X相比的新特性</h3><p>1.新的二进制格式（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</p>\n<p>2.多路复用（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。</p>\n<p>3.header压缩，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。</p>\n<p>4.服务端推送（server push），同SPDY一样，HTTP2.0也具有server push功能。</p>\n<h3 id=\"http-url-字符含义\"><a href=\"#http-url-字符含义\" class=\"headerlink\" title=\"http url 字符含义\"></a>http url 字符含义</h3><ul>\n<li><p>URL特殊符号及对应的十六进制值编码：  </p>\n<p>  (1)’+’     URL中+号表示空格                  %2B  </p>\n<p>  (2)空格     URL中的空格可以用+号或者编码        %20  </p>\n<p>  (3)/       分隔目录和子目录                   %2F  </p>\n<p>  (4)?       分隔实际的 URL 和参数              %3F  </p>\n<p>  (5)%       指定特殊字符                      %25  </p>\n<p>  (6)’#’       表示书签                       %23  </p>\n<p>  (7)&amp;       URL中指定的参数间的分隔符           %26  </p>\n<p>  (8)=       URL中指定参数的值                 %3D   </p>\n</li>\n</ul>\n<h3 id=\"http和https区别\"><a href=\"#http和https区别\" class=\"headerlink\" title=\"http和https区别\"></a>http和https区别</h3><ul>\n<li>HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL  </li>\n<li>HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少    </li>\n<li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议  </li>\n<li>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443  </li>\n<li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全  </li>\n</ul>\n<h3 id=\"无连接、无状态\"><a href=\"#无连接、无状态\" class=\"headerlink\" title=\"无连接、无状态\"></a>无连接、无状态</h3><ul>\n<li><p>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。  </p>\n</li>\n<li><p>无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。即我们给服务器发送 HTTP 请求之后，服务器根据请求，会给我们发送数据过来，但是，发送完，不会记录任何信息。</p>\n</li>\n</ul>\n<h3 id=\"get-和post区别\"><a href=\"#get-和post区别\" class=\"headerlink\" title=\"get 和post区别\"></a>get 和post区别</h3><ul>\n<li>GET后退按钮/刷新无害，POST数据会被重新提交（浏览器应该告知用户数据会被重新提交）。  </li>\n<li>GET书签可收藏，POST为书签不可收藏。GET能被缓存，POST不能缓存 。  </li>\n<li>GET编码类型application/x-www-form-url，POST编码类型encodedapplication/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。  </li>\n<li>GET历史参数保留在浏览器历史中。POST参数不会保存在浏览器历史中。    </li>\n<li>GET对数据长度有限制，当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。POST无限制。    </li>\n<li>GET只允许 ASCII 字符。POST没有限制。也允许二进制数据。     </li>\n<li>与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。GET的数据在 URL 中对所有人都是可见的。POST的数据不会显示在 URL 中。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"http通信的过程\"><a href=\"#http通信的过程\" class=\"headerlink\" title=\"http通信的过程\"></a>http通信的过程</h3>","more":"<p>(1) 建立tcp链接<br>(2) web浏览器向web服务器发送请求命令<br>(3) web浏览器发送请求头消息<br>(4) web服务器应答<br>(5) web服务器发送应答头消息<br>(6) web服务器向浏览器发送数据<br>(7) web服务器关闭tcp链接  </p>\n<h3 id=\"HTTP2-0和HTTP1-X相比的新特性\"><a href=\"#HTTP2-0和HTTP1-X相比的新特性\" class=\"headerlink\" title=\"HTTP2.0和HTTP1.X相比的新特性\"></a>HTTP2.0和HTTP1.X相比的新特性</h3><p>1.新的二进制格式（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</p>\n<p>2.多路复用（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。</p>\n<p>3.header压缩，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。</p>\n<p>4.服务端推送（server push），同SPDY一样，HTTP2.0也具有server push功能。</p>\n<h3 id=\"http-url-字符含义\"><a href=\"#http-url-字符含义\" class=\"headerlink\" title=\"http url 字符含义\"></a>http url 字符含义</h3><ul>\n<li><p>URL特殊符号及对应的十六进制值编码：  </p>\n<p>  (1)’+’     URL中+号表示空格                  %2B  </p>\n<p>  (2)空格     URL中的空格可以用+号或者编码        %20  </p>\n<p>  (3)/       分隔目录和子目录                   %2F  </p>\n<p>  (4)?       分隔实际的 URL 和参数              %3F  </p>\n<p>  (5)%       指定特殊字符                      %25  </p>\n<p>  (6)’#’       表示书签                       %23  </p>\n<p>  (7)&amp;       URL中指定的参数间的分隔符           %26  </p>\n<p>  (8)=       URL中指定参数的值                 %3D   </p>\n</li>\n</ul>\n<h3 id=\"http和https区别\"><a href=\"#http和https区别\" class=\"headerlink\" title=\"http和https区别\"></a>http和https区别</h3><ul>\n<li>HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL  </li>\n<li>HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少    </li>\n<li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议  </li>\n<li>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443  </li>\n<li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全  </li>\n</ul>\n<h3 id=\"无连接、无状态\"><a href=\"#无连接、无状态\" class=\"headerlink\" title=\"无连接、无状态\"></a>无连接、无状态</h3><ul>\n<li><p>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。  </p>\n</li>\n<li><p>无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。即我们给服务器发送 HTTP 请求之后，服务器根据请求，会给我们发送数据过来，但是，发送完，不会记录任何信息。</p>\n</li>\n</ul>\n<h3 id=\"get-和post区别\"><a href=\"#get-和post区别\" class=\"headerlink\" title=\"get 和post区别\"></a>get 和post区别</h3><ul>\n<li>GET后退按钮/刷新无害，POST数据会被重新提交（浏览器应该告知用户数据会被重新提交）。  </li>\n<li>GET书签可收藏，POST为书签不可收藏。GET能被缓存，POST不能缓存 。  </li>\n<li>GET编码类型application/x-www-form-url，POST编码类型encodedapplication/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。  </li>\n<li>GET历史参数保留在浏览器历史中。POST参数不会保存在浏览器历史中。    </li>\n<li>GET对数据长度有限制，当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。POST无限制。    </li>\n<li>GET只允许 ASCII 字符。POST没有限制。也允许二进制数据。     </li>\n<li>与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。GET的数据在 URL 中对所有人都是可见的。POST的数据不会显示在 URL 中。</li>\n</ul>"},{"title":"memcached's note","comments":1,"_content":"\n#### save cmd  \n\n<!-- more -->   \n\n1. set key flags exptime bytes [noreply]  \nvalue  \n\n    说明：\n    （如果set的key已经存在，该命令可以更新该key所对应的原来的数据，也就是实现更新的作用。\n\n    [key]: key-value 中的key 用于查找缓存\b值\n    [flags]: 包括\b简直对的整型参数，客户机使用它存储关于简直对的额外信息  \n    [exptime]: 在缓存中保存键值对的时间长度 （以s为单位）    \n    [bytes]: 缓存中字节数  \n    [noreply]: 告知服务器不需要返回数据  \n    [value]: 存储的值(始终位于第二行)  \n\n    ```  \n        set runoob 0 900 9\n        memcached\n        STORED\n        get runoob\n        VALUE runoob 0 9\n        memcached\n        END  \n    ```\n    out info:\n\n    -- STORED：保存成功后输出。\n    -- ERROR：在保存失败后输出。\n\n2. add key flags exptime bytes [noreply]  \nvalue\n \n    说明：\n    （如果 add 的 key 已经存在，则不会更新数据(过期的 key 会更新)，之前的值将仍然保持相同，并且您将获得响应 NOT_STORED）\n\n    ```\n    add new_key 0 900 10\n    data_value\n    STORED\n    get new_key\n    VALUE new_key 0 10\n    data_value\n    END\n    ```\n    out info;\n\n    -- STORED：保存成功后输出。\n    -- NOT_STORED ：在保存失败后输出。\n\n3. replace key flags exptime bytes [noreply]  \nvalue\n\n    说明：\n    （如果 key 不存在，则替换失败，并且您将获得响应 NOT_STORED。）\n\n    ```\n    add mykey 0 900 10\n    data_value\n    STORED\n    get mykey\n    VALUE mykey 0 10\n    data_value\n    END\n    replace mykey 0 900 16\n    some_other_value\n    get mykey\n    VALUE mykey 0 16\n    some_other_value\n    END\n    ```\n    out info:\n\n    -- STORED：保存成功后输出。\n    -- NOT_STORED：执行替换失败后输出。\n\n4. append key flags exptime bytes [noreply]  \nvalue\n\n    说明：\n    （Memcached append 命令用于向已存在 key(键) 的 value(数据值) 后面追加数据 。）\n\n    ```\n    set runoob 0 900 9\n    memcached\n    STORED\n    get runoob\n    VALUE runoob 0 9\n    memcached\n    END\n    append runoob 0 900 5\n    redis\n    STORED\n    get runoob\n    VALUE runoob 0 14\n    memcachedredis\n    END\n    ```\n    out info:\n    -- STORED：保存成功后输出。\n    -- NOT_STORED：该键在 Memcached 上不存在。\n    -- CLIENT_ERROR：执行错误。\n\n5. \bprepend key flags exptime bytes [noreply]  \nvalue\n\n    说明：\n    （\n    Memcached prepend 命令用于向已存在 key(键) 的 value(数据值) 前面追加数据 。）\n\n    ```\n    set runoob 0 900 9\n    memcached\n    STORED\n    get runoob\n    VALUE runoob 0 9\n    memcached\n    END\n    prepend runoob 0 900 5\n    redis\n    STORED\n    get runoob\n    VALUE runoob 0 14\n    redismemcached\n    END\n\n    ```\n    out info:\n    -- STORED：保存成功后输出。\n    -- NOT_STORED：该键在 Memcached 上不存在。\n    -- CLIENT_ERROR：执行错误。\n\n6. cas key flags exptime bytes unique_cas_token [noreply] value \n\n    \n    params:\n        unique_cas_token通过 gets 命令获取的一个唯一的64位值。\n    out info:\n    -- STORED：保存成功后输出。\n    -- ERROR：保存出错或语法错误。\n    -- EXISTS：在最后一次取值后另外一个用户也在更新该数据。\n    -- NOT_FOUND：Memcached 服务上不存在该键值。\n\n\n7. get key\n\n    说明： \n    （\n    Memcached get 命令获取存储在 key(键) 中的 value(数据值) ，如果 key 不存在，则返回空。）\n\n    多个key使用空格隔开：\n        get key1 key2 key3    \n\n8. \bgets key\n\n    说明：\n    (Memcached gets 命令获取带有 CAS 令牌存 的 value(数据值) ，如果 key 不存在，则返回空。)\n\n    ```\n    set runoob 0 900 9\n    memcached\n    STORED\n    gets runoob\n    VALUE runoob 0 9 1\n    memcached\n    END\n    ```\n    使用 gets 命令的输出结果中，在最后一列的数字 1 代表了 key 为 runoob 的 CAS 令牌    \n\n9. delete key [noreply]  \n\n    说明：\n    (删除已存在的key)\n    ```\n    set runoob 0 900 9\n    memcached\n    STORED\n    get runoob\n    VALUE runoob 0 9\n    memcached\n    END\n    delete runoob\n    DELETED\n    get runoob\n    END\n    delete runoob\n    NOT_FOUND\n\n    ```\n    out info:\n    -- DELETED：删除成功。\n    -- ERROR：语法错误或删除失败。\n    -- NOT_FOUND：key 不存在。      \n\n10. incr key increment_value  \n\n    说明：\n    key：键值 key-value 结构中的 key，用于查找缓存值。\n    increment_value： 增加的数值。\n    ```\n    set visitors 0 900 2\n    10\n    STORED\n    get visitors\n    VALUE visitors 0 2\n    10\n    END\n    incr visitors 5\n    15\n    get visitors\n    VALUE visitors 0 2\n    15\n    END\n    ```\n    ```\n    set visitors 0 900 2\n    10\n    STORED\n    get visitors\n    VALUE visitors 0 2\n    10\n    END\n    decr visitors 5\n    5\n    get visitors\n    VALUE visitors 0 1\n    5\n    END\n    ```\n\n    out info:\n    -- NOT_FOUND：key 不存在。\n    -- CLIENT_ERROR：自增值不是对象。\n    -- ERROR其他错误，如语法错误等。  \n\n#### count cmd  \n\n11. stats  \n\n    Memcached stats 命令用于返回统计信息例如 PID(进程号)、版本号、连接数等。\n\n\n12. stats items  \n\n    Memcached stats items 命令用于显示各个 slab 中 item 的数目和存储时长(最后一次访问距离现在的秒数)。\n\n13. stats sizes \n\n    Memcached stats sizes 命令用于显示所有item的大小和个数。\n\n    该信息返回两列，第一列是 item 的大小，第二列是 item 的个数。\n\n14. stats slabs\n\n    Memcached stats slabs 命令用于显示各个slab的信息，包括chunk的大小、数目、使用情况等。\n\n15. flush_all  \n\n    Memcached flush_all 命令用于清理缓存中的所有 key=>value(键=>值) 对。\n该命令提供了一个可选参数 time，用于在制定的时间后执行清理缓存操作。","source":"_posts/memcached.md","raw":"---\ntitle: memcached's note\ncategories: \n- 缓存\ntags: memcached\ncomments: true\n---\n\n#### save cmd  \n\n<!-- more -->   \n\n1. set key flags exptime bytes [noreply]  \nvalue  \n\n    说明：\n    （如果set的key已经存在，该命令可以更新该key所对应的原来的数据，也就是实现更新的作用。\n\n    [key]: key-value 中的key 用于查找缓存\b值\n    [flags]: 包括\b简直对的整型参数，客户机使用它存储关于简直对的额外信息  \n    [exptime]: 在缓存中保存键值对的时间长度 （以s为单位）    \n    [bytes]: 缓存中字节数  \n    [noreply]: 告知服务器不需要返回数据  \n    [value]: 存储的值(始终位于第二行)  \n\n    ```  \n        set runoob 0 900 9\n        memcached\n        STORED\n        get runoob\n        VALUE runoob 0 9\n        memcached\n        END  \n    ```\n    out info:\n\n    -- STORED：保存成功后输出。\n    -- ERROR：在保存失败后输出。\n\n2. add key flags exptime bytes [noreply]  \nvalue\n \n    说明：\n    （如果 add 的 key 已经存在，则不会更新数据(过期的 key 会更新)，之前的值将仍然保持相同，并且您将获得响应 NOT_STORED）\n\n    ```\n    add new_key 0 900 10\n    data_value\n    STORED\n    get new_key\n    VALUE new_key 0 10\n    data_value\n    END\n    ```\n    out info;\n\n    -- STORED：保存成功后输出。\n    -- NOT_STORED ：在保存失败后输出。\n\n3. replace key flags exptime bytes [noreply]  \nvalue\n\n    说明：\n    （如果 key 不存在，则替换失败，并且您将获得响应 NOT_STORED。）\n\n    ```\n    add mykey 0 900 10\n    data_value\n    STORED\n    get mykey\n    VALUE mykey 0 10\n    data_value\n    END\n    replace mykey 0 900 16\n    some_other_value\n    get mykey\n    VALUE mykey 0 16\n    some_other_value\n    END\n    ```\n    out info:\n\n    -- STORED：保存成功后输出。\n    -- NOT_STORED：执行替换失败后输出。\n\n4. append key flags exptime bytes [noreply]  \nvalue\n\n    说明：\n    （Memcached append 命令用于向已存在 key(键) 的 value(数据值) 后面追加数据 。）\n\n    ```\n    set runoob 0 900 9\n    memcached\n    STORED\n    get runoob\n    VALUE runoob 0 9\n    memcached\n    END\n    append runoob 0 900 5\n    redis\n    STORED\n    get runoob\n    VALUE runoob 0 14\n    memcachedredis\n    END\n    ```\n    out info:\n    -- STORED：保存成功后输出。\n    -- NOT_STORED：该键在 Memcached 上不存在。\n    -- CLIENT_ERROR：执行错误。\n\n5. \bprepend key flags exptime bytes [noreply]  \nvalue\n\n    说明：\n    （\n    Memcached prepend 命令用于向已存在 key(键) 的 value(数据值) 前面追加数据 。）\n\n    ```\n    set runoob 0 900 9\n    memcached\n    STORED\n    get runoob\n    VALUE runoob 0 9\n    memcached\n    END\n    prepend runoob 0 900 5\n    redis\n    STORED\n    get runoob\n    VALUE runoob 0 14\n    redismemcached\n    END\n\n    ```\n    out info:\n    -- STORED：保存成功后输出。\n    -- NOT_STORED：该键在 Memcached 上不存在。\n    -- CLIENT_ERROR：执行错误。\n\n6. cas key flags exptime bytes unique_cas_token [noreply] value \n\n    \n    params:\n        unique_cas_token通过 gets 命令获取的一个唯一的64位值。\n    out info:\n    -- STORED：保存成功后输出。\n    -- ERROR：保存出错或语法错误。\n    -- EXISTS：在最后一次取值后另外一个用户也在更新该数据。\n    -- NOT_FOUND：Memcached 服务上不存在该键值。\n\n\n7. get key\n\n    说明： \n    （\n    Memcached get 命令获取存储在 key(键) 中的 value(数据值) ，如果 key 不存在，则返回空。）\n\n    多个key使用空格隔开：\n        get key1 key2 key3    \n\n8. \bgets key\n\n    说明：\n    (Memcached gets 命令获取带有 CAS 令牌存 的 value(数据值) ，如果 key 不存在，则返回空。)\n\n    ```\n    set runoob 0 900 9\n    memcached\n    STORED\n    gets runoob\n    VALUE runoob 0 9 1\n    memcached\n    END\n    ```\n    使用 gets 命令的输出结果中，在最后一列的数字 1 代表了 key 为 runoob 的 CAS 令牌    \n\n9. delete key [noreply]  \n\n    说明：\n    (删除已存在的key)\n    ```\n    set runoob 0 900 9\n    memcached\n    STORED\n    get runoob\n    VALUE runoob 0 9\n    memcached\n    END\n    delete runoob\n    DELETED\n    get runoob\n    END\n    delete runoob\n    NOT_FOUND\n\n    ```\n    out info:\n    -- DELETED：删除成功。\n    -- ERROR：语法错误或删除失败。\n    -- NOT_FOUND：key 不存在。      \n\n10. incr key increment_value  \n\n    说明：\n    key：键值 key-value 结构中的 key，用于查找缓存值。\n    increment_value： 增加的数值。\n    ```\n    set visitors 0 900 2\n    10\n    STORED\n    get visitors\n    VALUE visitors 0 2\n    10\n    END\n    incr visitors 5\n    15\n    get visitors\n    VALUE visitors 0 2\n    15\n    END\n    ```\n    ```\n    set visitors 0 900 2\n    10\n    STORED\n    get visitors\n    VALUE visitors 0 2\n    10\n    END\n    decr visitors 5\n    5\n    get visitors\n    VALUE visitors 0 1\n    5\n    END\n    ```\n\n    out info:\n    -- NOT_FOUND：key 不存在。\n    -- CLIENT_ERROR：自增值不是对象。\n    -- ERROR其他错误，如语法错误等。  \n\n#### count cmd  \n\n11. stats  \n\n    Memcached stats 命令用于返回统计信息例如 PID(进程号)、版本号、连接数等。\n\n\n12. stats items  \n\n    Memcached stats items 命令用于显示各个 slab 中 item 的数目和存储时长(最后一次访问距离现在的秒数)。\n\n13. stats sizes \n\n    Memcached stats sizes 命令用于显示所有item的大小和个数。\n\n    该信息返回两列，第一列是 item 的大小，第二列是 item 的个数。\n\n14. stats slabs\n\n    Memcached stats slabs 命令用于显示各个slab的信息，包括chunk的大小、数目、使用情况等。\n\n15. flush_all  \n\n    Memcached flush_all 命令用于清理缓存中的所有 key=>value(键=>值) 对。\n该命令提供了一个可选参数 time，用于在制定的时间后执行清理缓存操作。","slug":"memcached","published":1,"date":"2018-11-11T03:39:55.418Z","updated":"2019-05-15T06:48:06.682Z","layout":"post","photos":[],"link":"","_id":"cjvowxfoj000fsb92yv0kprpr","content":"<h4 id=\"save-cmd\"><a href=\"#save-cmd\" class=\"headerlink\" title=\"save cmd\"></a>save cmd</h4><a id=\"more\"></a>   \n<ol>\n<li><p>set key flags exptime bytes [noreply]<br>value  </p>\n<p> 说明：<br> （如果set的key已经存在，该命令可以更新该key所对应的原来的数据，也就是实现更新的作用。</p>\n<p> [key]: key-value 中的key 用于查找缓存\b值<br> [flags]: 包括\b简直对的整型参数，客户机使用它存储关于简直对的额外信息<br> [exptime]: 在缓存中保存键值对的时间长度 （以s为单位）<br> [bytes]: 缓存中字节数<br> [noreply]: 告知服务器不需要返回数据<br> [value]: 存储的值(始终位于第二行)  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set runoob 0 900 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get runoob</span><br><span class=\"line\">VALUE runoob 0 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p> out info:</p>\n<p> – STORED：保存成功后输出。<br> – ERROR：在保存失败后输出。</p>\n</li>\n<li><p>add key flags exptime bytes [noreply]<br>value</p>\n<p> 说明：<br> （如果 add 的 key 已经存在，则不会更新数据(过期的 key 会更新)，之前的值将仍然保持相同，并且您将获得响应 NOT_STORED）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add new_key 0 900 10</span><br><span class=\"line\">data_value</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get new_key</span><br><span class=\"line\">VALUE new_key 0 10</span><br><span class=\"line\">data_value</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p> out info;</p>\n<p> – STORED：保存成功后输出。<br> – NOT_STORED ：在保存失败后输出。</p>\n</li>\n<li><p>replace key flags exptime bytes [noreply]<br>value</p>\n<p> 说明：<br> （如果 key 不存在，则替换失败，并且您将获得响应 NOT_STORED。）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add mykey 0 900 10</span><br><span class=\"line\">data_value</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get mykey</span><br><span class=\"line\">VALUE mykey 0 10</span><br><span class=\"line\">data_value</span><br><span class=\"line\">END</span><br><span class=\"line\">replace mykey 0 900 16</span><br><span class=\"line\">some_other_value</span><br><span class=\"line\">get mykey</span><br><span class=\"line\">VALUE mykey 0 16</span><br><span class=\"line\">some_other_value</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p> out info:</p>\n<p> – STORED：保存成功后输出。<br> – NOT_STORED：执行替换失败后输出。</p>\n</li>\n<li><p>append key flags exptime bytes [noreply]<br>value</p>\n<p> 说明：<br> （Memcached append 命令用于向已存在 key(键) 的 value(数据值) 后面追加数据 。）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set runoob 0 900 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get runoob</span><br><span class=\"line\">VALUE runoob 0 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">END</span><br><span class=\"line\">append runoob 0 900 5</span><br><span class=\"line\">redis</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get runoob</span><br><span class=\"line\">VALUE runoob 0 14</span><br><span class=\"line\">memcachedredis</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p> out info:<br> – STORED：保存成功后输出。<br> – NOT_STORED：该键在 Memcached 上不存在。<br> – CLIENT_ERROR：执行错误。</p>\n</li>\n<li><p>\bprepend key flags exptime bytes [noreply]<br>value</p>\n<p> 说明：<br> （<br> Memcached prepend 命令用于向已存在 key(键) 的 value(数据值) 前面追加数据 。）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set runoob 0 900 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get runoob</span><br><span class=\"line\">VALUE runoob 0 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">END</span><br><span class=\"line\">prepend runoob 0 900 5</span><br><span class=\"line\">redis</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get runoob</span><br><span class=\"line\">VALUE runoob 0 14</span><br><span class=\"line\">redismemcached</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p> out info:<br> – STORED：保存成功后输出。<br> – NOT_STORED：该键在 Memcached 上不存在。<br> – CLIENT_ERROR：执行错误。</p>\n</li>\n<li><p>cas key flags exptime bytes unique_cas_token [noreply] value </p>\n</li>\n</ol>\n<pre><code>params:\n    unique_cas_token通过 gets 命令获取的一个唯一的64位值。\nout info:\n-- STORED：保存成功后输出。\n-- ERROR：保存出错或语法错误。\n-- EXISTS：在最后一次取值后另外一个用户也在更新该数据。\n-- NOT_FOUND：Memcached 服务上不存在该键值。\n</code></pre><ol start=\"7\">\n<li><p>get key</p>\n<p> 说明：<br> （<br> Memcached get 命令获取存储在 key(键) 中的 value(数据值) ，如果 key 不存在，则返回空。）</p>\n<p> 多个key使用空格隔开：</p>\n<pre><code>get key1 key2 key3    \n</code></pre></li>\n<li><p>\bgets key</p>\n<p> 说明：<br> (Memcached gets 命令获取带有 CAS 令牌存 的 value(数据值) ，如果 key 不存在，则返回空。)</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set runoob 0 900 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">STORED</span><br><span class=\"line\">gets runoob</span><br><span class=\"line\">VALUE runoob 0 9 1</span><br><span class=\"line\">memcached</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p> 使用 gets 命令的输出结果中，在最后一列的数字 1 代表了 key 为 runoob 的 CAS 令牌    </p>\n</li>\n<li><p>delete key [noreply]  </p>\n<p> 说明：<br> (删除已存在的key)</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set runoob 0 900 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get runoob</span><br><span class=\"line\">VALUE runoob 0 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">END</span><br><span class=\"line\">delete runoob</span><br><span class=\"line\">DELETED</span><br><span class=\"line\">get runoob</span><br><span class=\"line\">END</span><br><span class=\"line\">delete runoob</span><br><span class=\"line\">NOT_FOUND</span><br></pre></td></tr></table></figure>\n<p> out info:<br> – DELETED：删除成功。<br> – ERROR：语法错误或删除失败。<br> – NOT_FOUND：key 不存在。      </p>\n</li>\n<li><p>incr key increment_value  </p>\n<p>说明：<br>key：键值 key-value 结构中的 key，用于查找缓存值。<br>increment_value： 增加的数值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set visitors 0 900 2</span><br><span class=\"line\">10</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get visitors</span><br><span class=\"line\">VALUE visitors 0 2</span><br><span class=\"line\">10</span><br><span class=\"line\">END</span><br><span class=\"line\">incr visitors 5</span><br><span class=\"line\">15</span><br><span class=\"line\">get visitors</span><br><span class=\"line\">VALUE visitors 0 2</span><br><span class=\"line\">15</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set visitors 0 900 2</span><br><span class=\"line\">10</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get visitors</span><br><span class=\"line\">VALUE visitors 0 2</span><br><span class=\"line\">10</span><br><span class=\"line\">END</span><br><span class=\"line\">decr visitors 5</span><br><span class=\"line\">5</span><br><span class=\"line\">get visitors</span><br><span class=\"line\">VALUE visitors 0 1</span><br><span class=\"line\">5</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p>out info:<br>– NOT_FOUND：key 不存在。<br>– CLIENT_ERROR：自增值不是对象。<br>– ERROR其他错误，如语法错误等。  </p>\n</li>\n</ol>\n<h4 id=\"count-cmd\"><a href=\"#count-cmd\" class=\"headerlink\" title=\"count cmd\"></a>count cmd</h4><ol start=\"11\">\n<li><p>stats  </p>\n<p>Memcached stats 命令用于返回统计信息例如 PID(进程号)、版本号、连接数等。</p>\n</li>\n</ol>\n<ol start=\"12\">\n<li><p>stats items  </p>\n<p>Memcached stats items 命令用于显示各个 slab 中 item 的数目和存储时长(最后一次访问距离现在的秒数)。</p>\n</li>\n<li><p>stats sizes </p>\n<p>Memcached stats sizes 命令用于显示所有item的大小和个数。</p>\n<p>该信息返回两列，第一列是 item 的大小，第二列是 item 的个数。</p>\n</li>\n<li><p>stats slabs</p>\n<p>Memcached stats slabs 命令用于显示各个slab的信息，包括chunk的大小、数目、使用情况等。</p>\n</li>\n<li><p>flush_all  </p>\n<p>Memcached flush_all 命令用于清理缓存中的所有 key=&gt;value(键=&gt;值) 对。<br>该命令提供了一个可选参数 time，用于在制定的时间后执行清理缓存操作。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h4 id=\"save-cmd\"><a href=\"#save-cmd\" class=\"headerlink\" title=\"save cmd\"></a>save cmd</h4>","more":"<ol>\n<li><p>set key flags exptime bytes [noreply]<br>value  </p>\n<p> 说明：<br> （如果set的key已经存在，该命令可以更新该key所对应的原来的数据，也就是实现更新的作用。</p>\n<p> [key]: key-value 中的key 用于查找缓存\b值<br> [flags]: 包括\b简直对的整型参数，客户机使用它存储关于简直对的额外信息<br> [exptime]: 在缓存中保存键值对的时间长度 （以s为单位）<br> [bytes]: 缓存中字节数<br> [noreply]: 告知服务器不需要返回数据<br> [value]: 存储的值(始终位于第二行)  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set runoob 0 900 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get runoob</span><br><span class=\"line\">VALUE runoob 0 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p> out info:</p>\n<p> – STORED：保存成功后输出。<br> – ERROR：在保存失败后输出。</p>\n</li>\n<li><p>add key flags exptime bytes [noreply]<br>value</p>\n<p> 说明：<br> （如果 add 的 key 已经存在，则不会更新数据(过期的 key 会更新)，之前的值将仍然保持相同，并且您将获得响应 NOT_STORED）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add new_key 0 900 10</span><br><span class=\"line\">data_value</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get new_key</span><br><span class=\"line\">VALUE new_key 0 10</span><br><span class=\"line\">data_value</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p> out info;</p>\n<p> – STORED：保存成功后输出。<br> – NOT_STORED ：在保存失败后输出。</p>\n</li>\n<li><p>replace key flags exptime bytes [noreply]<br>value</p>\n<p> 说明：<br> （如果 key 不存在，则替换失败，并且您将获得响应 NOT_STORED。）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add mykey 0 900 10</span><br><span class=\"line\">data_value</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get mykey</span><br><span class=\"line\">VALUE mykey 0 10</span><br><span class=\"line\">data_value</span><br><span class=\"line\">END</span><br><span class=\"line\">replace mykey 0 900 16</span><br><span class=\"line\">some_other_value</span><br><span class=\"line\">get mykey</span><br><span class=\"line\">VALUE mykey 0 16</span><br><span class=\"line\">some_other_value</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p> out info:</p>\n<p> – STORED：保存成功后输出。<br> – NOT_STORED：执行替换失败后输出。</p>\n</li>\n<li><p>append key flags exptime bytes [noreply]<br>value</p>\n<p> 说明：<br> （Memcached append 命令用于向已存在 key(键) 的 value(数据值) 后面追加数据 。）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set runoob 0 900 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get runoob</span><br><span class=\"line\">VALUE runoob 0 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">END</span><br><span class=\"line\">append runoob 0 900 5</span><br><span class=\"line\">redis</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get runoob</span><br><span class=\"line\">VALUE runoob 0 14</span><br><span class=\"line\">memcachedredis</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p> out info:<br> – STORED：保存成功后输出。<br> – NOT_STORED：该键在 Memcached 上不存在。<br> – CLIENT_ERROR：执行错误。</p>\n</li>\n<li><p>\bprepend key flags exptime bytes [noreply]<br>value</p>\n<p> 说明：<br> （<br> Memcached prepend 命令用于向已存在 key(键) 的 value(数据值) 前面追加数据 。）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set runoob 0 900 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get runoob</span><br><span class=\"line\">VALUE runoob 0 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">END</span><br><span class=\"line\">prepend runoob 0 900 5</span><br><span class=\"line\">redis</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get runoob</span><br><span class=\"line\">VALUE runoob 0 14</span><br><span class=\"line\">redismemcached</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p> out info:<br> – STORED：保存成功后输出。<br> – NOT_STORED：该键在 Memcached 上不存在。<br> – CLIENT_ERROR：执行错误。</p>\n</li>\n<li><p>cas key flags exptime bytes unique_cas_token [noreply] value </p>\n</li>\n</ol>\n<pre><code>params:\n    unique_cas_token通过 gets 命令获取的一个唯一的64位值。\nout info:\n-- STORED：保存成功后输出。\n-- ERROR：保存出错或语法错误。\n-- EXISTS：在最后一次取值后另外一个用户也在更新该数据。\n-- NOT_FOUND：Memcached 服务上不存在该键值。\n</code></pre><ol start=\"7\">\n<li><p>get key</p>\n<p> 说明：<br> （<br> Memcached get 命令获取存储在 key(键) 中的 value(数据值) ，如果 key 不存在，则返回空。）</p>\n<p> 多个key使用空格隔开：</p>\n<pre><code>get key1 key2 key3    \n</code></pre></li>\n<li><p>\bgets key</p>\n<p> 说明：<br> (Memcached gets 命令获取带有 CAS 令牌存 的 value(数据值) ，如果 key 不存在，则返回空。)</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set runoob 0 900 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">STORED</span><br><span class=\"line\">gets runoob</span><br><span class=\"line\">VALUE runoob 0 9 1</span><br><span class=\"line\">memcached</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p> 使用 gets 命令的输出结果中，在最后一列的数字 1 代表了 key 为 runoob 的 CAS 令牌    </p>\n</li>\n<li><p>delete key [noreply]  </p>\n<p> 说明：<br> (删除已存在的key)</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set runoob 0 900 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get runoob</span><br><span class=\"line\">VALUE runoob 0 9</span><br><span class=\"line\">memcached</span><br><span class=\"line\">END</span><br><span class=\"line\">delete runoob</span><br><span class=\"line\">DELETED</span><br><span class=\"line\">get runoob</span><br><span class=\"line\">END</span><br><span class=\"line\">delete runoob</span><br><span class=\"line\">NOT_FOUND</span><br></pre></td></tr></table></figure>\n<p> out info:<br> – DELETED：删除成功。<br> – ERROR：语法错误或删除失败。<br> – NOT_FOUND：key 不存在。      </p>\n</li>\n<li><p>incr key increment_value  </p>\n<p>说明：<br>key：键值 key-value 结构中的 key，用于查找缓存值。<br>increment_value： 增加的数值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set visitors 0 900 2</span><br><span class=\"line\">10</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get visitors</span><br><span class=\"line\">VALUE visitors 0 2</span><br><span class=\"line\">10</span><br><span class=\"line\">END</span><br><span class=\"line\">incr visitors 5</span><br><span class=\"line\">15</span><br><span class=\"line\">get visitors</span><br><span class=\"line\">VALUE visitors 0 2</span><br><span class=\"line\">15</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set visitors 0 900 2</span><br><span class=\"line\">10</span><br><span class=\"line\">STORED</span><br><span class=\"line\">get visitors</span><br><span class=\"line\">VALUE visitors 0 2</span><br><span class=\"line\">10</span><br><span class=\"line\">END</span><br><span class=\"line\">decr visitors 5</span><br><span class=\"line\">5</span><br><span class=\"line\">get visitors</span><br><span class=\"line\">VALUE visitors 0 1</span><br><span class=\"line\">5</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p>out info:<br>– NOT_FOUND：key 不存在。<br>– CLIENT_ERROR：自增值不是对象。<br>– ERROR其他错误，如语法错误等。  </p>\n</li>\n</ol>\n<h4 id=\"count-cmd\"><a href=\"#count-cmd\" class=\"headerlink\" title=\"count cmd\"></a>count cmd</h4><ol start=\"11\">\n<li><p>stats  </p>\n<p>Memcached stats 命令用于返回统计信息例如 PID(进程号)、版本号、连接数等。</p>\n</li>\n</ol>\n<ol start=\"12\">\n<li><p>stats items  </p>\n<p>Memcached stats items 命令用于显示各个 slab 中 item 的数目和存储时长(最后一次访问距离现在的秒数)。</p>\n</li>\n<li><p>stats sizes </p>\n<p>Memcached stats sizes 命令用于显示所有item的大小和个数。</p>\n<p>该信息返回两列，第一列是 item 的大小，第二列是 item 的个数。</p>\n</li>\n<li><p>stats slabs</p>\n<p>Memcached stats slabs 命令用于显示各个slab的信息，包括chunk的大小、数目、使用情况等。</p>\n</li>\n<li><p>flush_all  </p>\n<p>Memcached flush_all 命令用于清理缓存中的所有 key=&gt;value(键=&gt;值) 对。<br>该命令提供了一个可选参数 time，用于在制定的时间后执行清理缓存操作。</p>\n</li>\n</ol>"},{"title":"md转html","comments":1,"_content":"\n### md 转html\n\n<!-- more -->  \n\n```\npandoc -s -S --toc -c github2.css a.md  -o a.html   \n```\n### math.tex 转html\n math.tex文件\n    ```\n    % Pandoc math demos\n    $a^2 + b^2 = c^2$\n    $v(t) = v_0 + \\frac{1}{2}at^2$\n    $\\gamma = \\frac{1}{\\sqrt{1 - v^2/c^2}}$\n    $\\exists x \\forall y (Rxy \\equiv Ryx)$\n    $p \\wedge q \\models p$\n    $\\Box\\diamond p\\equiv\\diamond p$\n    $\\int_{0}^{1} x dx = \\left[ \\frac{1}{2}x^2 \\right]_{0}^{1} = \\frac{1}{2}$\n    $e^x = \\sum_{n=0}^\\infty \\frac{x^n}{n!} = \\lim_{n\\rightarrow\\infty} (1+x/n)^n$\n    ```\n    ```\n    pandoc math.tex -s --mathml  -o mathMathML.html\n    ```\n    \n### 命令行参数\n- -s –standalone转换输出文档时会自动加上合适的header和footer(例如standalone HTML, LaTeX, RTF)\n- -S \n- --toc \n- –data-dir=DIRECTORY指定用户数据目录，设定之后会在该目录下搜索pandoc数据文件。如果没有指定该选项，则会使用默认的用户数据目录:$HOME/.pandoc可通过pandoc --version命令查看\n- -c URL, –css=URL链接到CSS样式表。该选项能够使用多次来引入多个文件，所指定的文件能够以指定的顺序依次引入\n- -mathml 参数强制 Pandoc 将 LaTeX 中的数学公式转换成 MathML\n\n","source":"_posts/pandoc.md","raw":"---\ntitle: md转html\ncategories: \n- 工具\ntags:\n- pandoc \ncomments: true\n---\n\n### md 转html\n\n<!-- more -->  \n\n```\npandoc -s -S --toc -c github2.css a.md  -o a.html   \n```\n### math.tex 转html\n math.tex文件\n    ```\n    % Pandoc math demos\n    $a^2 + b^2 = c^2$\n    $v(t) = v_0 + \\frac{1}{2}at^2$\n    $\\gamma = \\frac{1}{\\sqrt{1 - v^2/c^2}}$\n    $\\exists x \\forall y (Rxy \\equiv Ryx)$\n    $p \\wedge q \\models p$\n    $\\Box\\diamond p\\equiv\\diamond p$\n    $\\int_{0}^{1} x dx = \\left[ \\frac{1}{2}x^2 \\right]_{0}^{1} = \\frac{1}{2}$\n    $e^x = \\sum_{n=0}^\\infty \\frac{x^n}{n!} = \\lim_{n\\rightarrow\\infty} (1+x/n)^n$\n    ```\n    ```\n    pandoc math.tex -s --mathml  -o mathMathML.html\n    ```\n    \n### 命令行参数\n- -s –standalone转换输出文档时会自动加上合适的header和footer(例如standalone HTML, LaTeX, RTF)\n- -S \n- --toc \n- –data-dir=DIRECTORY指定用户数据目录，设定之后会在该目录下搜索pandoc数据文件。如果没有指定该选项，则会使用默认的用户数据目录:$HOME/.pandoc可通过pandoc --version命令查看\n- -c URL, –css=URL链接到CSS样式表。该选项能够使用多次来引入多个文件，所指定的文件能够以指定的顺序依次引入\n- -mathml 参数强制 Pandoc 将 LaTeX 中的数学公式转换成 MathML\n\n","slug":"pandoc","published":1,"date":"2018-12-18T02:43:16.991Z","updated":"2019-05-15T06:48:21.199Z","layout":"post","photos":[],"link":"","_id":"cjvowxfom000hsb9206toc0lg","content":"<h3 id=\"md-转html\"><a href=\"#md-转html\" class=\"headerlink\" title=\"md 转html\"></a>md 转html</h3><a id=\"more\"></a>  \n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pandoc -s -S --toc -c github2.css a.md  -o a.html</span><br></pre></td></tr></table></figure>\n<h3 id=\"math-tex-转html\"><a href=\"#math-tex-转html\" class=\"headerlink\" title=\"math.tex 转html\"></a>math.tex 转html</h3><p> math.tex文件<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% Pandoc math demos</span><br><span class=\"line\">$a^2 + b^2 = c^2$</span><br><span class=\"line\">$v(t) = v_0 + \\frac&#123;1&#125;&#123;2&#125;at^2$</span><br><span class=\"line\">$\\gamma = \\frac&#123;1&#125;&#123;\\sqrt&#123;1 - v^2/c^2&#125;&#125;$</span><br><span class=\"line\">$\\exists x \\forall y (Rxy \\equiv Ryx)$</span><br><span class=\"line\">$p \\wedge q \\models p$</span><br><span class=\"line\">$\\Box\\diamond p\\equiv\\diamond p$</span><br><span class=\"line\">$\\int_&#123;0&#125;^&#123;1&#125; x dx = \\left[ \\frac&#123;1&#125;&#123;2&#125;x^2 \\right]_&#123;0&#125;^&#123;1&#125; = \\frac&#123;1&#125;&#123;2&#125;$</span><br><span class=\"line\">$e^x = \\sum_&#123;n=0&#125;^\\infty \\frac&#123;x^n&#125;&#123;n!&#125; = \\lim_&#123;n\\rightarrow\\infty&#125; (1+x/n)^n$</span><br></pre></td></tr></table></figure></p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pandoc math.tex -s --mathml  -o mathMathML.html</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"命令行参数\"><a href=\"#命令行参数\" class=\"headerlink\" title=\"命令行参数\"></a>命令行参数</h3><ul>\n<li>-s –standalone转换输出文档时会自动加上合适的header和footer(例如standalone HTML, LaTeX, RTF)</li>\n<li>-S </li>\n<li>–toc </li>\n<li>–data-dir=DIRECTORY指定用户数据目录，设定之后会在该目录下搜索pandoc数据文件。如果没有指定该选项，则会使用默认的用户数据目录:$HOME/.pandoc可通过pandoc –version命令查看</li>\n<li>-c URL, –css=URL链接到CSS样式表。该选项能够使用多次来引入多个文件，所指定的文件能够以指定的顺序依次引入</li>\n<li>-mathml 参数强制 Pandoc 将 LaTeX 中的数学公式转换成 MathML</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"md-转html\"><a href=\"#md-转html\" class=\"headerlink\" title=\"md 转html\"></a>md 转html</h3>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pandoc -s -S --toc -c github2.css a.md  -o a.html</span><br></pre></td></tr></table></figure>\n<h3 id=\"math-tex-转html\"><a href=\"#math-tex-转html\" class=\"headerlink\" title=\"math.tex 转html\"></a>math.tex 转html</h3><p> math.tex文件<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% Pandoc math demos</span><br><span class=\"line\">$a^2 + b^2 = c^2$</span><br><span class=\"line\">$v(t) = v_0 + \\frac&#123;1&#125;&#123;2&#125;at^2$</span><br><span class=\"line\">$\\gamma = \\frac&#123;1&#125;&#123;\\sqrt&#123;1 - v^2/c^2&#125;&#125;$</span><br><span class=\"line\">$\\exists x \\forall y (Rxy \\equiv Ryx)$</span><br><span class=\"line\">$p \\wedge q \\models p$</span><br><span class=\"line\">$\\Box\\diamond p\\equiv\\diamond p$</span><br><span class=\"line\">$\\int_&#123;0&#125;^&#123;1&#125; x dx = \\left[ \\frac&#123;1&#125;&#123;2&#125;x^2 \\right]_&#123;0&#125;^&#123;1&#125; = \\frac&#123;1&#125;&#123;2&#125;$</span><br><span class=\"line\">$e^x = \\sum_&#123;n=0&#125;^\\infty \\frac&#123;x^n&#125;&#123;n!&#125; = \\lim_&#123;n\\rightarrow\\infty&#125; (1+x/n)^n$</span><br></pre></td></tr></table></figure></p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pandoc math.tex -s --mathml  -o mathMathML.html</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"命令行参数\"><a href=\"#命令行参数\" class=\"headerlink\" title=\"命令行参数\"></a>命令行参数</h3><ul>\n<li>-s –standalone转换输出文档时会自动加上合适的header和footer(例如standalone HTML, LaTeX, RTF)</li>\n<li>-S </li>\n<li>–toc </li>\n<li>–data-dir=DIRECTORY指定用户数据目录，设定之后会在该目录下搜索pandoc数据文件。如果没有指定该选项，则会使用默认的用户数据目录:$HOME/.pandoc可通过pandoc –version命令查看</li>\n<li>-c URL, –css=URL链接到CSS样式表。该选项能够使用多次来引入多个文件，所指定的文件能够以指定的顺序依次引入</li>\n<li>-mathml 参数强制 Pandoc 将 LaTeX 中的数学公式转换成 MathML</li>\n</ul>"},{"title":"服务发现对比","comments":1,"_content":"### cap原理  \n\n<!-- more -->\n\nConsistency(一致性)： 数据一致更新，所有数据变动都是同步的\nAvailability(可用性)： 好的响应性能\nPartition tolerance(分区耐受性)： 可靠性\n\n\n分区耐受性  \n保证数据可持久存储，在各种情况下都不会出现数据丢失的问题。为了实现数据的持久性，不但需要在写入的时候保证数据能够持久存储，还需要能够将数据备份一个或多个副本，存放在不同的物理设备上，防止某个存储设备发生故障时，数据不会丢失。\n\n数据一致性  \n在数据有多份副本的情况下，如果网络、服务器、软件出现了故障，会导致部分副本写入失败。这就造成了多个副本之间的数据不一致，数据内容冲突。\n\n数据可用性  \n多个副本分别存储于不同的物理设备的情况下，如果某个设备损坏，就需要从另一个数据存储设备上访问数据。如果这个过程不能很快完成，或者在完成的过程中需要停止终端用户访问数据，那么在切换存储设备的这段时间内，数据就是不可访问的。\n\n### 常用服务发现特性对比  \n\n|feature|consul|zookeeper|etcd|eureka|\n|-------|------|---------|----|------|\n|服务健康检查|服务状态、内存,硬盘等|(弱)长链接,keepalive|连接心跳|可配支持|\n|多数据中心|支持|-|-|-|\n|kv存储服务|支持|支持|支持|-|\n|一致性|raft|paxos|raft|-|\n|cap原理|CA|CP|CP|AP|\n|使用接口|http和dns|客户端|http/grpc|http|\n|watch支持|全量/支持long polling|支持|支持long polling|支持long polling/大部分增量|\n|自身监控|metrics|-|metrics|metrics|\n|安全|acl/https|acl|http支持(弱)|-|\n","source":"_posts/service.md","raw":"---\ntitle: 服务发现对比\ncategories: \n- 组件\ntags: \n- 服务发现\ncomments: true\n---\n### cap原理  \n\n<!-- more -->\n\nConsistency(一致性)： 数据一致更新，所有数据变动都是同步的\nAvailability(可用性)： 好的响应性能\nPartition tolerance(分区耐受性)： 可靠性\n\n\n分区耐受性  \n保证数据可持久存储，在各种情况下都不会出现数据丢失的问题。为了实现数据的持久性，不但需要在写入的时候保证数据能够持久存储，还需要能够将数据备份一个或多个副本，存放在不同的物理设备上，防止某个存储设备发生故障时，数据不会丢失。\n\n数据一致性  \n在数据有多份副本的情况下，如果网络、服务器、软件出现了故障，会导致部分副本写入失败。这就造成了多个副本之间的数据不一致，数据内容冲突。\n\n数据可用性  \n多个副本分别存储于不同的物理设备的情况下，如果某个设备损坏，就需要从另一个数据存储设备上访问数据。如果这个过程不能很快完成，或者在完成的过程中需要停止终端用户访问数据，那么在切换存储设备的这段时间内，数据就是不可访问的。\n\n### 常用服务发现特性对比  \n\n|feature|consul|zookeeper|etcd|eureka|\n|-------|------|---------|----|------|\n|服务健康检查|服务状态、内存,硬盘等|(弱)长链接,keepalive|连接心跳|可配支持|\n|多数据中心|支持|-|-|-|\n|kv存储服务|支持|支持|支持|-|\n|一致性|raft|paxos|raft|-|\n|cap原理|CA|CP|CP|AP|\n|使用接口|http和dns|客户端|http/grpc|http|\n|watch支持|全量/支持long polling|支持|支持long polling|支持long polling/大部分增量|\n|自身监控|metrics|-|metrics|metrics|\n|安全|acl/https|acl|http支持(弱)|-|\n","slug":"service","published":1,"date":"2019-05-14T09:21:09.404Z","updated":"2019-05-15T06:58:33.534Z","layout":"post","photos":[],"link":"","_id":"cjvowxfoo000lsb92fkvjyodu","content":"<h3 id=\"cap原理\"><a href=\"#cap原理\" class=\"headerlink\" title=\"cap原理\"></a>cap原理</h3><a id=\"more\"></a>\n<p>Consistency(一致性)： 数据一致更新，所有数据变动都是同步的<br>Availability(可用性)： 好的响应性能<br>Partition tolerance(分区耐受性)： 可靠性</p>\n<p>分区耐受性<br>保证数据可持久存储，在各种情况下都不会出现数据丢失的问题。为了实现数据的持久性，不但需要在写入的时候保证数据能够持久存储，还需要能够将数据备份一个或多个副本，存放在不同的物理设备上，防止某个存储设备发生故障时，数据不会丢失。</p>\n<p>数据一致性<br>在数据有多份副本的情况下，如果网络、服务器、软件出现了故障，会导致部分副本写入失败。这就造成了多个副本之间的数据不一致，数据内容冲突。</p>\n<p>数据可用性<br>多个副本分别存储于不同的物理设备的情况下，如果某个设备损坏，就需要从另一个数据存储设备上访问数据。如果这个过程不能很快完成，或者在完成的过程中需要停止终端用户访问数据，那么在切换存储设备的这段时间内，数据就是不可访问的。</p>\n<h3 id=\"常用服务发现特性对比\"><a href=\"#常用服务发现特性对比\" class=\"headerlink\" title=\"常用服务发现特性对比\"></a>常用服务发现特性对比</h3><table>\n<thead>\n<tr>\n<th>feature</th>\n<th>consul</th>\n<th>zookeeper</th>\n<th>etcd</th>\n<th>eureka</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>服务健康检查</td>\n<td>服务状态、内存,硬盘等</td>\n<td>(弱)长链接,keepalive</td>\n<td>连接心跳</td>\n<td>可配支持</td>\n</tr>\n<tr>\n<td>多数据中心</td>\n<td>支持</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>kv存储服务</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>-</td>\n</tr>\n<tr>\n<td>一致性</td>\n<td>raft</td>\n<td>paxos</td>\n<td>raft</td>\n<td>-</td>\n</tr>\n<tr>\n<td>cap原理</td>\n<td>CA</td>\n<td>CP</td>\n<td>CP</td>\n<td>AP</td>\n</tr>\n<tr>\n<td>使用接口</td>\n<td>http和dns</td>\n<td>客户端</td>\n<td>http/grpc</td>\n<td>http</td>\n</tr>\n<tr>\n<td>watch支持</td>\n<td>全量/支持long polling</td>\n<td>支持</td>\n<td>支持long polling</td>\n<td>支持long polling/大部分增量</td>\n</tr>\n<tr>\n<td>自身监控</td>\n<td>metrics</td>\n<td>-</td>\n<td>metrics</td>\n<td>metrics</td>\n</tr>\n<tr>\n<td>安全</td>\n<td>acl/https</td>\n<td>acl</td>\n<td>http支持(弱)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<h3 id=\"cap原理\"><a href=\"#cap原理\" class=\"headerlink\" title=\"cap原理\"></a>cap原理</h3>","more":"<p>Consistency(一致性)： 数据一致更新，所有数据变动都是同步的<br>Availability(可用性)： 好的响应性能<br>Partition tolerance(分区耐受性)： 可靠性</p>\n<p>分区耐受性<br>保证数据可持久存储，在各种情况下都不会出现数据丢失的问题。为了实现数据的持久性，不但需要在写入的时候保证数据能够持久存储，还需要能够将数据备份一个或多个副本，存放在不同的物理设备上，防止某个存储设备发生故障时，数据不会丢失。</p>\n<p>数据一致性<br>在数据有多份副本的情况下，如果网络、服务器、软件出现了故障，会导致部分副本写入失败。这就造成了多个副本之间的数据不一致，数据内容冲突。</p>\n<p>数据可用性<br>多个副本分别存储于不同的物理设备的情况下，如果某个设备损坏，就需要从另一个数据存储设备上访问数据。如果这个过程不能很快完成，或者在完成的过程中需要停止终端用户访问数据，那么在切换存储设备的这段时间内，数据就是不可访问的。</p>\n<h3 id=\"常用服务发现特性对比\"><a href=\"#常用服务发现特性对比\" class=\"headerlink\" title=\"常用服务发现特性对比\"></a>常用服务发现特性对比</h3><table>\n<thead>\n<tr>\n<th>feature</th>\n<th>consul</th>\n<th>zookeeper</th>\n<th>etcd</th>\n<th>eureka</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>服务健康检查</td>\n<td>服务状态、内存,硬盘等</td>\n<td>(弱)长链接,keepalive</td>\n<td>连接心跳</td>\n<td>可配支持</td>\n</tr>\n<tr>\n<td>多数据中心</td>\n<td>支持</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>kv存储服务</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>-</td>\n</tr>\n<tr>\n<td>一致性</td>\n<td>raft</td>\n<td>paxos</td>\n<td>raft</td>\n<td>-</td>\n</tr>\n<tr>\n<td>cap原理</td>\n<td>CA</td>\n<td>CP</td>\n<td>CP</td>\n<td>AP</td>\n</tr>\n<tr>\n<td>使用接口</td>\n<td>http和dns</td>\n<td>客户端</td>\n<td>http/grpc</td>\n<td>http</td>\n</tr>\n<tr>\n<td>watch支持</td>\n<td>全量/支持long polling</td>\n<td>支持</td>\n<td>支持long polling</td>\n<td>支持long polling/大部分增量</td>\n</tr>\n<tr>\n<td>自身监控</td>\n<td>metrics</td>\n<td>-</td>\n<td>metrics</td>\n<td>metrics</td>\n</tr>\n<tr>\n<td>安全</td>\n<td>acl/https</td>\n<td>acl</td>\n<td>http支持(弱)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>"},{"title":"排序","comments":1,"_content":"\n#### golang 实现归并和堆排序  \n\n<!-- more -->  \n\n1.归并排序  \n\n```\n    package main\n\n    import \"fmt\"\n\n    func main(){\n        a := make([]int,0,0)\n        r := make([]int,0,0)\n        a = []int{4,1,3,2,6,5,7}\n        r = []int{0,0,0,0,0,0,0}\n        mergesort(a,0,6,r)\n        fmt.Println(a)\n        fmt.Println(r)\n    }\n    func Swap(a *int,b *int){\n        temp := *a\n        *a = *b\n        *b = temp\n    }\n\n    func mergesort(a []int,start,end int64,result []int){\n\n        if end - start == 0{\n            return\n        }\n        if end - start == 1{\n            if a[start] > a[end]{\n                Swap(&a[start],&a[end])\n            }\n        }else{\n            mergesort(a,start,(end-start+1)/2 + start,result)\n            mergesort(a,(end-start+1)/2 +1 + start,end,result)\n            merge(a,start,end,result)\n            var i int64 =0\n            for i=start;i<=end;i++{\n                a[i] = result[i]\n            }\n        }\n\n    }\n\n    func merge(a []int,start,end int64,result []int){\n\n        left_index  := start\n        left_length := (end-start+1)/2 +1\n        right_index := start + left_length\n        result_index := start\n\n        for  left_index < start + left_length && right_index < end+1 {\n\n            if a[left_index] <= a[right_index]{\n                result[result_index] = a[left_index]\n                result_index++\n                left_index++\n            }else{\n                result[result_index] = a[right_index]\n                right_index++\n                result_index++\n            }\n\n        }\n        for left_index < start +left_length{\n            result[result_index] = a[left_index]\n            result_index++\n            left_index++\n        }\n        for right_index < end+1{\n            result[result_index] = a[right_index]\n            right_index++\n            result_index++\n        }\n    }\n```\n\n\n\n\n2.堆排序  \n\n```   \n    package main\n\n    import \"fmt\"\n\n    func main(){\n        a := make([]int,0,0)\n        a = []int{1,4,2,3,7,9,8}\n        heapsort(a)\n        fmt.Println(a)\n    }\n\n    func swap(a *int,b *int){\n        temp := *a\n        *a = *b\n        *b = temp\n    }\n    func heapsort(a []int){\n\n        //创建大顶堆\n        var i int = 0\n        var j int = 0\n        for i= len(a)/2;i>=0;i--{\n            heapadjust(a,i,len(a))\n        }\n        for j= len(a) -1 ;j>=1;j--{\n            swap(&a[0],&a[j])\n            heapadjust(a,0,j)\n        }\n\n    }\n    func heapadjust(a []int,i,length int){\n\n        var left int = 2*i +1\n        if left < length{\n            maxIndex := left\n            right := left + 1\n            if a[right] > a[left] && right < length{\n                maxIndex = right\n            }\n            if a[maxIndex] > a[i]{\n                swap(&a[maxIndex],&a[i])\n                heapadjust(a,maxIndex,length)\n            }\n        }\n    }\n```\n","source":"_posts/sort.md","raw":"---\ntitle: 排序\ncategories: \n- 算法\ntags:     \n- 堆排序\n- 归并排序 \ncomments: true\n---\n\n#### golang 实现归并和堆排序  \n\n<!-- more -->  \n\n1.归并排序  \n\n```\n    package main\n\n    import \"fmt\"\n\n    func main(){\n        a := make([]int,0,0)\n        r := make([]int,0,0)\n        a = []int{4,1,3,2,6,5,7}\n        r = []int{0,0,0,0,0,0,0}\n        mergesort(a,0,6,r)\n        fmt.Println(a)\n        fmt.Println(r)\n    }\n    func Swap(a *int,b *int){\n        temp := *a\n        *a = *b\n        *b = temp\n    }\n\n    func mergesort(a []int,start,end int64,result []int){\n\n        if end - start == 0{\n            return\n        }\n        if end - start == 1{\n            if a[start] > a[end]{\n                Swap(&a[start],&a[end])\n            }\n        }else{\n            mergesort(a,start,(end-start+1)/2 + start,result)\n            mergesort(a,(end-start+1)/2 +1 + start,end,result)\n            merge(a,start,end,result)\n            var i int64 =0\n            for i=start;i<=end;i++{\n                a[i] = result[i]\n            }\n        }\n\n    }\n\n    func merge(a []int,start,end int64,result []int){\n\n        left_index  := start\n        left_length := (end-start+1)/2 +1\n        right_index := start + left_length\n        result_index := start\n\n        for  left_index < start + left_length && right_index < end+1 {\n\n            if a[left_index] <= a[right_index]{\n                result[result_index] = a[left_index]\n                result_index++\n                left_index++\n            }else{\n                result[result_index] = a[right_index]\n                right_index++\n                result_index++\n            }\n\n        }\n        for left_index < start +left_length{\n            result[result_index] = a[left_index]\n            result_index++\n            left_index++\n        }\n        for right_index < end+1{\n            result[result_index] = a[right_index]\n            right_index++\n            result_index++\n        }\n    }\n```\n\n\n\n\n2.堆排序  \n\n```   \n    package main\n\n    import \"fmt\"\n\n    func main(){\n        a := make([]int,0,0)\n        a = []int{1,4,2,3,7,9,8}\n        heapsort(a)\n        fmt.Println(a)\n    }\n\n    func swap(a *int,b *int){\n        temp := *a\n        *a = *b\n        *b = temp\n    }\n    func heapsort(a []int){\n\n        //创建大顶堆\n        var i int = 0\n        var j int = 0\n        for i= len(a)/2;i>=0;i--{\n            heapadjust(a,i,len(a))\n        }\n        for j= len(a) -1 ;j>=1;j--{\n            swap(&a[0],&a[j])\n            heapadjust(a,0,j)\n        }\n\n    }\n    func heapadjust(a []int,i,length int){\n\n        var left int = 2*i +1\n        if left < length{\n            maxIndex := left\n            right := left + 1\n            if a[right] > a[left] && right < length{\n                maxIndex = right\n            }\n            if a[maxIndex] > a[i]{\n                swap(&a[maxIndex],&a[i])\n                heapadjust(a,maxIndex,length)\n            }\n        }\n    }\n```\n","slug":"sort","published":1,"date":"2018-10-25T12:13:26.000Z","updated":"2019-05-15T06:48:59.742Z","layout":"post","photos":[],"link":"","_id":"cjvowxfos000osb92ejqarmix","content":"<h4 id=\"golang-实现归并和堆排序\"><a href=\"#golang-实现归并和堆排序\" class=\"headerlink\" title=\"golang 实现归并和堆排序\"></a>golang 实现归并和堆排序</h4><a id=\"more\"></a>  \n<p>1.归并排序  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\">    a := make([]int,0,0)</span><br><span class=\"line\">    r := make([]int,0,0)</span><br><span class=\"line\">    a = []int&#123;4,1,3,2,6,5,7&#125;</span><br><span class=\"line\">    r = []int&#123;0,0,0,0,0,0,0&#125;</span><br><span class=\"line\">    mergesort(a,0,6,r)</span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">    fmt.Println(r)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func Swap(a *int,b *int)&#123;</span><br><span class=\"line\">    temp := *a</span><br><span class=\"line\">    *a = *b</span><br><span class=\"line\">    *b = temp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func mergesort(a []int,start,end int64,result []int)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if end - start == 0&#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if end - start == 1&#123;</span><br><span class=\"line\">        if a[start] &gt; a[end]&#123;</span><br><span class=\"line\">            Swap(&amp;a[start],&amp;a[end])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        mergesort(a,start,(end-start+1)/2 + start,result)</span><br><span class=\"line\">        mergesort(a,(end-start+1)/2 +1 + start,end,result)</span><br><span class=\"line\">        merge(a,start,end,result)</span><br><span class=\"line\">        var i int64 =0</span><br><span class=\"line\">        for i=start;i&lt;=end;i++&#123;</span><br><span class=\"line\">            a[i] = result[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func merge(a []int,start,end int64,result []int)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    left_index  := start</span><br><span class=\"line\">    left_length := (end-start+1)/2 +1</span><br><span class=\"line\">    right_index := start + left_length</span><br><span class=\"line\">    result_index := start</span><br><span class=\"line\"></span><br><span class=\"line\">    for  left_index &lt; start + left_length &amp;&amp; right_index &lt; end+1 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if a[left_index] &lt;= a[right_index]&#123;</span><br><span class=\"line\">            result[result_index] = a[left_index]</span><br><span class=\"line\">            result_index++</span><br><span class=\"line\">            left_index++</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            result[result_index] = a[right_index]</span><br><span class=\"line\">            right_index++</span><br><span class=\"line\">            result_index++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for left_index &lt; start +left_length&#123;</span><br><span class=\"line\">        result[result_index] = a[left_index]</span><br><span class=\"line\">        result_index++</span><br><span class=\"line\">        left_index++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for right_index &lt; end+1&#123;</span><br><span class=\"line\">        result[result_index] = a[right_index]</span><br><span class=\"line\">        right_index++</span><br><span class=\"line\">        result_index++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.堆排序  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\">    a := make([]int,0,0)</span><br><span class=\"line\">    a = []int&#123;1,4,2,3,7,9,8&#125;</span><br><span class=\"line\">    heapsort(a)</span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func swap(a *int,b *int)&#123;</span><br><span class=\"line\">    temp := *a</span><br><span class=\"line\">    *a = *b</span><br><span class=\"line\">    *b = temp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func heapsort(a []int)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //创建大顶堆</span><br><span class=\"line\">    var i int = 0</span><br><span class=\"line\">    var j int = 0</span><br><span class=\"line\">    for i= len(a)/2;i&gt;=0;i--&#123;</span><br><span class=\"line\">        heapadjust(a,i,len(a))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for j= len(a) -1 ;j&gt;=1;j--&#123;</span><br><span class=\"line\">        swap(&amp;a[0],&amp;a[j])</span><br><span class=\"line\">        heapadjust(a,0,j)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func heapadjust(a []int,i,length int)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var left int = 2*i +1</span><br><span class=\"line\">    if left &lt; length&#123;</span><br><span class=\"line\">        maxIndex := left</span><br><span class=\"line\">        right := left + 1</span><br><span class=\"line\">        if a[right] &gt; a[left] &amp;&amp; right &lt; length&#123;</span><br><span class=\"line\">            maxIndex = right</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if a[maxIndex] &gt; a[i]&#123;</span><br><span class=\"line\">            swap(&amp;a[maxIndex],&amp;a[i])</span><br><span class=\"line\">            heapadjust(a,maxIndex,length)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"golang-实现归并和堆排序\"><a href=\"#golang-实现归并和堆排序\" class=\"headerlink\" title=\"golang 实现归并和堆排序\"></a>golang 实现归并和堆排序</h4>","more":"<p>1.归并排序  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\">    a := make([]int,0,0)</span><br><span class=\"line\">    r := make([]int,0,0)</span><br><span class=\"line\">    a = []int&#123;4,1,3,2,6,5,7&#125;</span><br><span class=\"line\">    r = []int&#123;0,0,0,0,0,0,0&#125;</span><br><span class=\"line\">    mergesort(a,0,6,r)</span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">    fmt.Println(r)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func Swap(a *int,b *int)&#123;</span><br><span class=\"line\">    temp := *a</span><br><span class=\"line\">    *a = *b</span><br><span class=\"line\">    *b = temp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func mergesort(a []int,start,end int64,result []int)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if end - start == 0&#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if end - start == 1&#123;</span><br><span class=\"line\">        if a[start] &gt; a[end]&#123;</span><br><span class=\"line\">            Swap(&amp;a[start],&amp;a[end])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        mergesort(a,start,(end-start+1)/2 + start,result)</span><br><span class=\"line\">        mergesort(a,(end-start+1)/2 +1 + start,end,result)</span><br><span class=\"line\">        merge(a,start,end,result)</span><br><span class=\"line\">        var i int64 =0</span><br><span class=\"line\">        for i=start;i&lt;=end;i++&#123;</span><br><span class=\"line\">            a[i] = result[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func merge(a []int,start,end int64,result []int)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    left_index  := start</span><br><span class=\"line\">    left_length := (end-start+1)/2 +1</span><br><span class=\"line\">    right_index := start + left_length</span><br><span class=\"line\">    result_index := start</span><br><span class=\"line\"></span><br><span class=\"line\">    for  left_index &lt; start + left_length &amp;&amp; right_index &lt; end+1 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if a[left_index] &lt;= a[right_index]&#123;</span><br><span class=\"line\">            result[result_index] = a[left_index]</span><br><span class=\"line\">            result_index++</span><br><span class=\"line\">            left_index++</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            result[result_index] = a[right_index]</span><br><span class=\"line\">            right_index++</span><br><span class=\"line\">            result_index++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for left_index &lt; start +left_length&#123;</span><br><span class=\"line\">        result[result_index] = a[left_index]</span><br><span class=\"line\">        result_index++</span><br><span class=\"line\">        left_index++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for right_index &lt; end+1&#123;</span><br><span class=\"line\">        result[result_index] = a[right_index]</span><br><span class=\"line\">        right_index++</span><br><span class=\"line\">        result_index++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.堆排序  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\">    a := make([]int,0,0)</span><br><span class=\"line\">    a = []int&#123;1,4,2,3,7,9,8&#125;</span><br><span class=\"line\">    heapsort(a)</span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func swap(a *int,b *int)&#123;</span><br><span class=\"line\">    temp := *a</span><br><span class=\"line\">    *a = *b</span><br><span class=\"line\">    *b = temp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func heapsort(a []int)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //创建大顶堆</span><br><span class=\"line\">    var i int = 0</span><br><span class=\"line\">    var j int = 0</span><br><span class=\"line\">    for i= len(a)/2;i&gt;=0;i--&#123;</span><br><span class=\"line\">        heapadjust(a,i,len(a))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for j= len(a) -1 ;j&gt;=1;j--&#123;</span><br><span class=\"line\">        swap(&amp;a[0],&amp;a[j])</span><br><span class=\"line\">        heapadjust(a,0,j)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func heapadjust(a []int,i,length int)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var left int = 2*i +1</span><br><span class=\"line\">    if left &lt; length&#123;</span><br><span class=\"line\">        maxIndex := left</span><br><span class=\"line\">        right := left + 1</span><br><span class=\"line\">        if a[right] &gt; a[left] &amp;&amp; right &lt; length&#123;</span><br><span class=\"line\">            maxIndex = right</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if a[maxIndex] &gt; a[i]&#123;</span><br><span class=\"line\">            swap(&amp;a[maxIndex],&amp;a[i])</span><br><span class=\"line\">            heapadjust(a,maxIndex,length)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"mysql数据库使用规范总结","comments":1,"_content":"\n### 基本规范  \n\n<!-- more -->\n\n- 表存储引擎设置为innodb\n- 表字符集默认使用utf8,必要时使用utf8mb4。utf8mb4是utf8的超集,有存储4字节例如表情符号时使用他。\n- 禁止数据库中存储大文件,例如照片.可以将大文件存储在对象存储系统中。数据库存储路径\n\n- 一般不使用存储过程、视图、触发器,event.对数据库性能影响大，调试，排错，迁移都比较困难.拓展性差\n- 对于互联网业务，能让站点层和服务层干的事,不要交到数据库\n\n### 命名规范\n\n- 库名，表名,列名都必须小写,采用下划线分割\n- 库名，表名,列名最好见名知意。长度不超过32个字符\n- 库备份以bak为前缀，日期为后缀\n- 从库以-s为后缀\n- 备库以-ss为后缀\n\n### 建表规范\n- 单实例表个数控制在2000个以内\n- 单表分表个数控制在1024个以内\n- 表必须有主键，一般使用unsigned整数类型为主键  \n\n- 删除无主键的表,如果是row模式的主从架构。从库会挂住\n- 一般不使用外键,如果要保证完整性。应该由应用程式实现  \n\n- 外键使得表之间相互耦合，影响update/delete性能.有可能造成死锁\n- 建议将大字段,访问频率少的字段拆分到单独表中存储，分离冷热数据  \n\n### 列设计规范  \n\n- 根据业务区分使用tinyint/int/bigint,分别占用1/4/8字节\n- 根据业务区分使用char/varchar\n\n- 字段长度固定,或者长度近似的业务场景,适用char,能减少碎片,查询性能高\n- 字段长度相差大，或者更新少的业务场景，适合使用varchar,可以减少空间\n- 根据业务区分使用datetime/timestamp(分别占5/4字节)\n\n- 把not null字段设置为默认值.因为null的列使用索引统计,值都更加复杂。更难优化。只能使用is null 或者is not null 而在=/!=/in/not in有大坑\n\n- 使用int unsigned 存储ipv4 ,不要用char(15).\n- 使用varchar(20)存储手机号,不要用整数\n- varchar可以模糊查询\n\n### 索引规范  \n\n- 唯一索引使用uniq_[字段名]来命名\n- 非唯一索引使用idx_[字段名]来命名\n- 单张表索引数量控制在5个以内\n\n- 太多索引影响写性能;生成执行计划时,如果索引太多,会降低性能.并可能导致mysql选择不到最优索引\n- 组合索引字段数建议不超过5个\n- 不建议在频繁更新的字段上建立索引\n- 非必要不用join查询，如果要join查询,被join的字段必须类型相同,并建立索引\n- 组合索引最前缀原则,避免重复建索引,如果建立了(a,b,c)相当于建立了(a),(a,b),(a,b,c)\n\n### sql书写规范  \n\n- 尽量不写select *，只获取必要字段.否则会增加cpu/io/内存/带宽的消耗\n- 同一个字段上的or改写成in,in的值要少于50个\n- 应用程序捕获sql异常，方便定位线上问题         \n- insert必须指定字段,禁止使用insert into table values()\n- 尽量不对大表join和子查询\n\n\n### 建表实例  \n\n```\n    CREATE TABLE `user` (\n    `user_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '会员信息表主键，自增长',\n    `uuid` bigint(20) DEFAULT '0' COMMENT '会员唯一标识表主键，自增长',\n    `guid` bigint(20) DEFAULT '0' COMMENT '用户中心全局ID',\n    `is_certed` tinyint(4) DEFAULT '2' COMMENT '是否认证，1 认证 2  未认证',\n    `mobile` varchar(40) COLLATE utf8mb4_bin NOT NULL COMMENT '手机号码',\n    `last_login_tm` datetime(6) DEFAULT '0000-00-00 00:00:00.000000' COMMENT '最后一次登录时间',\n    `last_login_device` varchar(20) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '最后一次登录设备号',\n    `remark` varchar(250) COLLATE utf8mb4_bin DEFAULT '' COMMENT '备注',\n    `is_deleted` tinyint(4) DEFAULT '1' COMMENT '是否删除，1 未删除，2 已删除',\n    `created_tm` datetime(6) DEFAULT CURRENT_TIMESTAMP(6) COMMENT '创建时间，默认是 CURRENT_TIMESTAMP(6)',\n    `updated_tm` datetime(6) DEFAULT '0000-00-00 00:00:00.000000' ON UPDATE CURRENT_TIMESTAMP(6) COMMENT '修改时间，修改时 CURRENT_TIMESTAMP(6)',\n    PRIMARY KEY (`user_id`)\n    ) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='会员信息表';  \n```","source":"_posts/sql.md","raw":"---\ntitle: mysql数据库使用规范总结\ncategories: \n- 数据库\ntags:\n- mysql\n- 数据库规范 \ncomments: true\n---\n\n### 基本规范  \n\n<!-- more -->\n\n- 表存储引擎设置为innodb\n- 表字符集默认使用utf8,必要时使用utf8mb4。utf8mb4是utf8的超集,有存储4字节例如表情符号时使用他。\n- 禁止数据库中存储大文件,例如照片.可以将大文件存储在对象存储系统中。数据库存储路径\n\n- 一般不使用存储过程、视图、触发器,event.对数据库性能影响大，调试，排错，迁移都比较困难.拓展性差\n- 对于互联网业务，能让站点层和服务层干的事,不要交到数据库\n\n### 命名规范\n\n- 库名，表名,列名都必须小写,采用下划线分割\n- 库名，表名,列名最好见名知意。长度不超过32个字符\n- 库备份以bak为前缀，日期为后缀\n- 从库以-s为后缀\n- 备库以-ss为后缀\n\n### 建表规范\n- 单实例表个数控制在2000个以内\n- 单表分表个数控制在1024个以内\n- 表必须有主键，一般使用unsigned整数类型为主键  \n\n- 删除无主键的表,如果是row模式的主从架构。从库会挂住\n- 一般不使用外键,如果要保证完整性。应该由应用程式实现  \n\n- 外键使得表之间相互耦合，影响update/delete性能.有可能造成死锁\n- 建议将大字段,访问频率少的字段拆分到单独表中存储，分离冷热数据  \n\n### 列设计规范  \n\n- 根据业务区分使用tinyint/int/bigint,分别占用1/4/8字节\n- 根据业务区分使用char/varchar\n\n- 字段长度固定,或者长度近似的业务场景,适用char,能减少碎片,查询性能高\n- 字段长度相差大，或者更新少的业务场景，适合使用varchar,可以减少空间\n- 根据业务区分使用datetime/timestamp(分别占5/4字节)\n\n- 把not null字段设置为默认值.因为null的列使用索引统计,值都更加复杂。更难优化。只能使用is null 或者is not null 而在=/!=/in/not in有大坑\n\n- 使用int unsigned 存储ipv4 ,不要用char(15).\n- 使用varchar(20)存储手机号,不要用整数\n- varchar可以模糊查询\n\n### 索引规范  \n\n- 唯一索引使用uniq_[字段名]来命名\n- 非唯一索引使用idx_[字段名]来命名\n- 单张表索引数量控制在5个以内\n\n- 太多索引影响写性能;生成执行计划时,如果索引太多,会降低性能.并可能导致mysql选择不到最优索引\n- 组合索引字段数建议不超过5个\n- 不建议在频繁更新的字段上建立索引\n- 非必要不用join查询，如果要join查询,被join的字段必须类型相同,并建立索引\n- 组合索引最前缀原则,避免重复建索引,如果建立了(a,b,c)相当于建立了(a),(a,b),(a,b,c)\n\n### sql书写规范  \n\n- 尽量不写select *，只获取必要字段.否则会增加cpu/io/内存/带宽的消耗\n- 同一个字段上的or改写成in,in的值要少于50个\n- 应用程序捕获sql异常，方便定位线上问题         \n- insert必须指定字段,禁止使用insert into table values()\n- 尽量不对大表join和子查询\n\n\n### 建表实例  \n\n```\n    CREATE TABLE `user` (\n    `user_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '会员信息表主键，自增长',\n    `uuid` bigint(20) DEFAULT '0' COMMENT '会员唯一标识表主键，自增长',\n    `guid` bigint(20) DEFAULT '0' COMMENT '用户中心全局ID',\n    `is_certed` tinyint(4) DEFAULT '2' COMMENT '是否认证，1 认证 2  未认证',\n    `mobile` varchar(40) COLLATE utf8mb4_bin NOT NULL COMMENT '手机号码',\n    `last_login_tm` datetime(6) DEFAULT '0000-00-00 00:00:00.000000' COMMENT '最后一次登录时间',\n    `last_login_device` varchar(20) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '最后一次登录设备号',\n    `remark` varchar(250) COLLATE utf8mb4_bin DEFAULT '' COMMENT '备注',\n    `is_deleted` tinyint(4) DEFAULT '1' COMMENT '是否删除，1 未删除，2 已删除',\n    `created_tm` datetime(6) DEFAULT CURRENT_TIMESTAMP(6) COMMENT '创建时间，默认是 CURRENT_TIMESTAMP(6)',\n    `updated_tm` datetime(6) DEFAULT '0000-00-00 00:00:00.000000' ON UPDATE CURRENT_TIMESTAMP(6) COMMENT '修改时间，修改时 CURRENT_TIMESTAMP(6)',\n    PRIMARY KEY (`user_id`)\n    ) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='会员信息表';  \n```","slug":"sql","published":1,"date":"2018-10-26T02:12:44.000Z","updated":"2019-05-15T06:49:09.623Z","layout":"post","photos":[],"link":"","_id":"cjvowxfou000ssb92ur3thk34","content":"<h3 id=\"基本规范\"><a href=\"#基本规范\" class=\"headerlink\" title=\"基本规范\"></a>基本规范</h3><a id=\"more\"></a>\n<ul>\n<li>表存储引擎设置为innodb</li>\n<li>表字符集默认使用utf8,必要时使用utf8mb4。utf8mb4是utf8的超集,有存储4字节例如表情符号时使用他。</li>\n<li><p>禁止数据库中存储大文件,例如照片.可以将大文件存储在对象存储系统中。数据库存储路径</p>\n</li>\n<li><p>一般不使用存储过程、视图、触发器,event.对数据库性能影响大，调试，排错，迁移都比较困难.拓展性差</p>\n</li>\n<li>对于互联网业务，能让站点层和服务层干的事,不要交到数据库</li>\n</ul>\n<h3 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h3><ul>\n<li>库名，表名,列名都必须小写,采用下划线分割</li>\n<li>库名，表名,列名最好见名知意。长度不超过32个字符</li>\n<li>库备份以bak为前缀，日期为后缀</li>\n<li>从库以-s为后缀</li>\n<li>备库以-ss为后缀</li>\n</ul>\n<h3 id=\"建表规范\"><a href=\"#建表规范\" class=\"headerlink\" title=\"建表规范\"></a>建表规范</h3><ul>\n<li>单实例表个数控制在2000个以内</li>\n<li>单表分表个数控制在1024个以内</li>\n<li><p>表必须有主键，一般使用unsigned整数类型为主键  </p>\n</li>\n<li><p>删除无主键的表,如果是row模式的主从架构。从库会挂住</p>\n</li>\n<li><p>一般不使用外键,如果要保证完整性。应该由应用程式实现  </p>\n</li>\n<li><p>外键使得表之间相互耦合，影响update/delete性能.有可能造成死锁</p>\n</li>\n<li>建议将大字段,访问频率少的字段拆分到单独表中存储，分离冷热数据  </li>\n</ul>\n<h3 id=\"列设计规范\"><a href=\"#列设计规范\" class=\"headerlink\" title=\"列设计规范\"></a>列设计规范</h3><ul>\n<li>根据业务区分使用tinyint/int/bigint,分别占用1/4/8字节</li>\n<li><p>根据业务区分使用char/varchar</p>\n</li>\n<li><p>字段长度固定,或者长度近似的业务场景,适用char,能减少碎片,查询性能高</p>\n</li>\n<li>字段长度相差大，或者更新少的业务场景，适合使用varchar,可以减少空间</li>\n<li><p>根据业务区分使用datetime/timestamp(分别占5/4字节)</p>\n</li>\n<li><p>把not null字段设置为默认值.因为null的列使用索引统计,值都更加复杂。更难优化。只能使用is null 或者is not null 而在=/!=/in/not in有大坑</p>\n</li>\n<li><p>使用int unsigned 存储ipv4 ,不要用char(15).</p>\n</li>\n<li>使用varchar(20)存储手机号,不要用整数</li>\n<li>varchar可以模糊查询</li>\n</ul>\n<h3 id=\"索引规范\"><a href=\"#索引规范\" class=\"headerlink\" title=\"索引规范\"></a>索引规范</h3><ul>\n<li>唯一索引使用uniq_[字段名]来命名</li>\n<li>非唯一索引使用idx_[字段名]来命名</li>\n<li><p>单张表索引数量控制在5个以内</p>\n</li>\n<li><p>太多索引影响写性能;生成执行计划时,如果索引太多,会降低性能.并可能导致mysql选择不到最优索引</p>\n</li>\n<li>组合索引字段数建议不超过5个</li>\n<li>不建议在频繁更新的字段上建立索引</li>\n<li>非必要不用join查询，如果要join查询,被join的字段必须类型相同,并建立索引</li>\n<li>组合索引最前缀原则,避免重复建索引,如果建立了(a,b,c)相当于建立了(a),(a,b),(a,b,c)</li>\n</ul>\n<h3 id=\"sql书写规范\"><a href=\"#sql书写规范\" class=\"headerlink\" title=\"sql书写规范\"></a>sql书写规范</h3><ul>\n<li>尽量不写select *，只获取必要字段.否则会增加cpu/io/内存/带宽的消耗</li>\n<li>同一个字段上的or改写成in,in的值要少于50个</li>\n<li>应用程序捕获sql异常，方便定位线上问题         </li>\n<li>insert必须指定字段,禁止使用insert into table values()</li>\n<li>尽量不对大表join和子查询</li>\n</ul>\n<h3 id=\"建表实例\"><a href=\"#建表实例\" class=\"headerlink\" title=\"建表实例\"></a>建表实例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `user` (</span><br><span class=\"line\">`user_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;会员信息表主键，自增长&apos;,</span><br><span class=\"line\">`uuid` bigint(20) DEFAULT &apos;0&apos; COMMENT &apos;会员唯一标识表主键，自增长&apos;,</span><br><span class=\"line\">`guid` bigint(20) DEFAULT &apos;0&apos; COMMENT &apos;用户中心全局ID&apos;,</span><br><span class=\"line\">`is_certed` tinyint(4) DEFAULT &apos;2&apos; COMMENT &apos;是否认证，1 认证 2  未认证&apos;,</span><br><span class=\"line\">`mobile` varchar(40) COLLATE utf8mb4_bin NOT NULL COMMENT &apos;手机号码&apos;,</span><br><span class=\"line\">`last_login_tm` datetime(6) DEFAULT &apos;0000-00-00 00:00:00.000000&apos; COMMENT &apos;最后一次登录时间&apos;,</span><br><span class=\"line\">`last_login_device` varchar(20) COLLATE utf8mb4_bin DEFAULT NULL COMMENT &apos;最后一次登录设备号&apos;,</span><br><span class=\"line\">`remark` varchar(250) COLLATE utf8mb4_bin DEFAULT &apos;&apos; COMMENT &apos;备注&apos;,</span><br><span class=\"line\">`is_deleted` tinyint(4) DEFAULT &apos;1&apos; COMMENT &apos;是否删除，1 未删除，2 已删除&apos;,</span><br><span class=\"line\">`created_tm` datetime(6) DEFAULT CURRENT_TIMESTAMP(6) COMMENT &apos;创建时间，默认是 CURRENT_TIMESTAMP(6)&apos;,</span><br><span class=\"line\">`updated_tm` datetime(6) DEFAULT &apos;0000-00-00 00:00:00.000000&apos; ON UPDATE CURRENT_TIMESTAMP(6) COMMENT &apos;修改时间，修改时 CURRENT_TIMESTAMP(6)&apos;,</span><br><span class=\"line\">PRIMARY KEY (`user_id`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT=&apos;会员信息表&apos;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"基本规范\"><a href=\"#基本规范\" class=\"headerlink\" title=\"基本规范\"></a>基本规范</h3>","more":"<ul>\n<li>表存储引擎设置为innodb</li>\n<li>表字符集默认使用utf8,必要时使用utf8mb4。utf8mb4是utf8的超集,有存储4字节例如表情符号时使用他。</li>\n<li><p>禁止数据库中存储大文件,例如照片.可以将大文件存储在对象存储系统中。数据库存储路径</p>\n</li>\n<li><p>一般不使用存储过程、视图、触发器,event.对数据库性能影响大，调试，排错，迁移都比较困难.拓展性差</p>\n</li>\n<li>对于互联网业务，能让站点层和服务层干的事,不要交到数据库</li>\n</ul>\n<h3 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h3><ul>\n<li>库名，表名,列名都必须小写,采用下划线分割</li>\n<li>库名，表名,列名最好见名知意。长度不超过32个字符</li>\n<li>库备份以bak为前缀，日期为后缀</li>\n<li>从库以-s为后缀</li>\n<li>备库以-ss为后缀</li>\n</ul>\n<h3 id=\"建表规范\"><a href=\"#建表规范\" class=\"headerlink\" title=\"建表规范\"></a>建表规范</h3><ul>\n<li>单实例表个数控制在2000个以内</li>\n<li>单表分表个数控制在1024个以内</li>\n<li><p>表必须有主键，一般使用unsigned整数类型为主键  </p>\n</li>\n<li><p>删除无主键的表,如果是row模式的主从架构。从库会挂住</p>\n</li>\n<li><p>一般不使用外键,如果要保证完整性。应该由应用程式实现  </p>\n</li>\n<li><p>外键使得表之间相互耦合，影响update/delete性能.有可能造成死锁</p>\n</li>\n<li>建议将大字段,访问频率少的字段拆分到单独表中存储，分离冷热数据  </li>\n</ul>\n<h3 id=\"列设计规范\"><a href=\"#列设计规范\" class=\"headerlink\" title=\"列设计规范\"></a>列设计规范</h3><ul>\n<li>根据业务区分使用tinyint/int/bigint,分别占用1/4/8字节</li>\n<li><p>根据业务区分使用char/varchar</p>\n</li>\n<li><p>字段长度固定,或者长度近似的业务场景,适用char,能减少碎片,查询性能高</p>\n</li>\n<li>字段长度相差大，或者更新少的业务场景，适合使用varchar,可以减少空间</li>\n<li><p>根据业务区分使用datetime/timestamp(分别占5/4字节)</p>\n</li>\n<li><p>把not null字段设置为默认值.因为null的列使用索引统计,值都更加复杂。更难优化。只能使用is null 或者is not null 而在=/!=/in/not in有大坑</p>\n</li>\n<li><p>使用int unsigned 存储ipv4 ,不要用char(15).</p>\n</li>\n<li>使用varchar(20)存储手机号,不要用整数</li>\n<li>varchar可以模糊查询</li>\n</ul>\n<h3 id=\"索引规范\"><a href=\"#索引规范\" class=\"headerlink\" title=\"索引规范\"></a>索引规范</h3><ul>\n<li>唯一索引使用uniq_[字段名]来命名</li>\n<li>非唯一索引使用idx_[字段名]来命名</li>\n<li><p>单张表索引数量控制在5个以内</p>\n</li>\n<li><p>太多索引影响写性能;生成执行计划时,如果索引太多,会降低性能.并可能导致mysql选择不到最优索引</p>\n</li>\n<li>组合索引字段数建议不超过5个</li>\n<li>不建议在频繁更新的字段上建立索引</li>\n<li>非必要不用join查询，如果要join查询,被join的字段必须类型相同,并建立索引</li>\n<li>组合索引最前缀原则,避免重复建索引,如果建立了(a,b,c)相当于建立了(a),(a,b),(a,b,c)</li>\n</ul>\n<h3 id=\"sql书写规范\"><a href=\"#sql书写规范\" class=\"headerlink\" title=\"sql书写规范\"></a>sql书写规范</h3><ul>\n<li>尽量不写select *，只获取必要字段.否则会增加cpu/io/内存/带宽的消耗</li>\n<li>同一个字段上的or改写成in,in的值要少于50个</li>\n<li>应用程序捕获sql异常，方便定位线上问题         </li>\n<li>insert必须指定字段,禁止使用insert into table values()</li>\n<li>尽量不对大表join和子查询</li>\n</ul>\n<h3 id=\"建表实例\"><a href=\"#建表实例\" class=\"headerlink\" title=\"建表实例\"></a>建表实例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `user` (</span><br><span class=\"line\">`user_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;会员信息表主键，自增长&apos;,</span><br><span class=\"line\">`uuid` bigint(20) DEFAULT &apos;0&apos; COMMENT &apos;会员唯一标识表主键，自增长&apos;,</span><br><span class=\"line\">`guid` bigint(20) DEFAULT &apos;0&apos; COMMENT &apos;用户中心全局ID&apos;,</span><br><span class=\"line\">`is_certed` tinyint(4) DEFAULT &apos;2&apos; COMMENT &apos;是否认证，1 认证 2  未认证&apos;,</span><br><span class=\"line\">`mobile` varchar(40) COLLATE utf8mb4_bin NOT NULL COMMENT &apos;手机号码&apos;,</span><br><span class=\"line\">`last_login_tm` datetime(6) DEFAULT &apos;0000-00-00 00:00:00.000000&apos; COMMENT &apos;最后一次登录时间&apos;,</span><br><span class=\"line\">`last_login_device` varchar(20) COLLATE utf8mb4_bin DEFAULT NULL COMMENT &apos;最后一次登录设备号&apos;,</span><br><span class=\"line\">`remark` varchar(250) COLLATE utf8mb4_bin DEFAULT &apos;&apos; COMMENT &apos;备注&apos;,</span><br><span class=\"line\">`is_deleted` tinyint(4) DEFAULT &apos;1&apos; COMMENT &apos;是否删除，1 未删除，2 已删除&apos;,</span><br><span class=\"line\">`created_tm` datetime(6) DEFAULT CURRENT_TIMESTAMP(6) COMMENT &apos;创建时间，默认是 CURRENT_TIMESTAMP(6)&apos;,</span><br><span class=\"line\">`updated_tm` datetime(6) DEFAULT &apos;0000-00-00 00:00:00.000000&apos; ON UPDATE CURRENT_TIMESTAMP(6) COMMENT &apos;修改时间，修改时 CURRENT_TIMESTAMP(6)&apos;,</span><br><span class=\"line\">PRIMARY KEY (`user_id`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT=&apos;会员信息表&apos;;</span><br></pre></td></tr></table></figure>"},{"title":"xargs","comments":1,"_content":"### xargs\n\n<!-- more -->\n\n    命令可以通过管道接受字符串，并将接收到的字符串通过空格分割成许多参数(默认情况下是通过空格分割) 然后将参数传递给其后面的命令，作为后面命令的命令行参数\n\n\n### -d\n    xargs将其标准输入中的内容以空白(包括空格、Tab、回车换行等)分割成多个后当作命令行参数传给后面的命令\n    ```\n    echo \"11@22@33\" |xargs -d '@' echo \n    ```","source":"_posts/xargs.md","raw":"---\ntitle: xargs\ncategories: \n- 工具\ntags:\n- xargs \ncomments: true\n---\n### xargs\n\n<!-- more -->\n\n    命令可以通过管道接受字符串，并将接收到的字符串通过空格分割成许多参数(默认情况下是通过空格分割) 然后将参数传递给其后面的命令，作为后面命令的命令行参数\n\n\n### -d\n    xargs将其标准输入中的内容以空白(包括空格、Tab、回车换行等)分割成多个后当作命令行参数传给后面的命令\n    ```\n    echo \"11@22@33\" |xargs -d '@' echo \n    ```","slug":"xargs","published":1,"date":"2018-12-18T08:13:34.935Z","updated":"2019-05-15T03:59:42.589Z","layout":"post","photos":[],"link":"","_id":"cjvowxfow000usb92z6p1y47b","content":"<h3 id=\"xargs\"><a href=\"#xargs\" class=\"headerlink\" title=\"xargs\"></a>xargs</h3><a id=\"more\"></a>\n<pre><code>命令可以通过管道接受字符串，并将接收到的字符串通过空格分割成许多参数(默认情况下是通过空格分割) 然后将参数传递给其后面的命令，作为后面命令的命令行参数\n</code></pre><h3 id=\"d\"><a href=\"#d\" class=\"headerlink\" title=\"-d\"></a>-d</h3><pre><code>xargs将其标准输入中的内容以空白(包括空格、Tab、回车换行等)分割成多个后当作命令行参数传给后面的命令\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;11@22@33&quot; |xargs -d &apos;@&apos; echo</span><br></pre></td></tr></table></figure>\n</code></pre>","site":{"data":{}},"excerpt":"<h3 id=\"xargs\"><a href=\"#xargs\" class=\"headerlink\" title=\"xargs\"></a>xargs</h3>","more":"<pre><code>命令可以通过管道接受字符串，并将接收到的字符串通过空格分割成许多参数(默认情况下是通过空格分割) 然后将参数传递给其后面的命令，作为后面命令的命令行参数\n</code></pre><h3 id=\"d\"><a href=\"#d\" class=\"headerlink\" title=\"-d\"></a>-d</h3><pre><code>xargs将其标准输入中的内容以空白(包括空格、Tab、回车换行等)分割成多个后当作命令行参数传给后面的命令\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;11@22@33&quot; |xargs -d &apos;@&apos; echo</span><br></pre></td></tr></table></figure>\n</code></pre>"},{"title":"kafka消息中间件","comments":1,"_content":"\n\n## cli of kafka \n\n<!-- more -->\n\n- start zookeeper\n    ```\n    zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties \n    ```\n- start kafka\n    ```\n    kafka-server-start /usr/local/etc/kafka/server.properties \n    ```\n- create topic\n    ```\n    cd /usr/local/Cellar/kafka/2.1.0\n    ./bin/kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n    ```\n- show topics\n    ```\n    cd /usr/local/Cellar/kafka/2.1.0\n    ./bin/kafka-topics --list --zookeeper localhost:2181\n    ```\n- delete topic\n    ```\n    cd /usr/local/Cellar/kafka/2.1.0\n    ./bin/kafka-run-class kafka.admin.DeleteTopicCommand --topic test --zookeeper127.0.0.1:2181\n    ```\n- start producer\n    ```\n    cd /usr/local/Cellar/kafka/2.1.0\n    bin/kafka-console-producer --broker-list localhost:9092 --topic test\n    ```\n- start consumer\n    ```\n    cd /usr/local/Cellar/kafka/2.1.0\n    ./bin/kafka-console-consumer --bootstrap-server localhost:9092 --group cousunmer --topic test --from-beginning\n    ``` \n- stop kafka\n    ```\n    cd /usr/local/Cellar/kafka/2.1.0 \n     ./bin/kafka-server-stop\n    ```\n- 查看消费组\n    - 查看消费组列表\n        ```\n        ./bin/kafka-consumer-groups --bootstrap-server localhost:9092 --list\n        ```\n    - 查看某个消费组信息\n        ```\n        /bin/kafka-consumer-groups --bootstrap-server localhost:9092  --describe --group consumer03\n        ```\n- 查看topic\n    - 查看topic列表\n        ```\n        ./bin/kafka-topics.sh --zookeeper localhost:2181 --list\n        ```\n    - 查看指定topic信息\n        ```\n        ./bin/kafka-topics.sh --zookeeper localhost:2181 --describe --topic Hello-Kafka\n        ```\n    - 修改topic分区数\n        ```\n        ./bin/kafka-topics.sh --zookeeper localhost：2181 --alter --topic Hello-Kafka --partitions 3\n        ```\n    \n## why need kafka?\n- 解藕消息的生产和消费\n- 缓冲\n- 并行\n\n- 设计目标\n    - 消息持久化：以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上的数据也能保证常数时间复杂度的访问性能。\n    - 高吞吐：在廉价的商用机器上也能支持单机每秒10万条以上的吞吐量。\n    - 分布式：支持消息分区以及分布式消费，并保证分区内的消息顺序。\n    - 跨平台：支持不同语言平台的客户端。\n    - 实时性：支持实时数据处理和离线数据处理。\n    - 伸缩性：支持水平扩展（producer可以将数据发给多个broker上的多个partition,consumer也可以从多个broker上的不同partition读取数据）\n\n## 使用场景1:\n\n- 解藕 各个系统之间通过消息系统这个统一的接口交换数据，无须关心彼此的存在\n- 冗余 消息系统具有持久化的能力，规避消息处理前丢失的风险\n- 拓展 消息系统是统一的数据接口 各系统可独立扩展\n- 异步通信 在不需要立即处理请求的情况下 可以将请求放入消息系统 合适的时候再处理\n- 峰值处理能力 消息系统可以顶住峰值流量 业务系统可根据处理能力从消息系统获取并处理对应量的请求\n- 可恢复性 系统中部分组件失效不影响整个系统 恢复后仍可从消息系统获取并处理数据\n\n## 常用消息系统对比\n- RabbitMQ erlang编写 支持多协议AMQP，XMPP,SMTP,STOMP,支持负载均衡 数据持久化\n    支持peer-2-peer和发布/订阅模式\n- Redis 轻量级。就入队操作而言 redis对于短消息小于10kb的性能比rabbitmq好\n- ZeroMQ 轻量级 不需要单独消息服务器或者中间件，应用程序扮演该角色，peer-2-peer本质是一个库\n- ActiveMQ JMS实现 peer-to-peer 支持持久化 XA分布式事务\n- kafka高性能跨语言的分布式发布/订阅消息系统 数据持久化 全分布式 同时支持在线和离线处理\n- MetaQ/RocketMQ 纯java实现 发布/订阅消息系统 支持本地事务和分布式事务\n\n## zookeeper & kafka\n\nkafka使用zookeeper来实现动态的集群扩展，不需要更改客户端（producer和consumer）的配置。broker会在zookeeper注册并保持相关的元数据（topic，partition信息等）更新。而客户端会在zookeeper上注册相关的watcher。一旦zookeeper发生变化，客户端能及时感知并作出相应调整。\n\n说明：Producer端使用zookeeper用来\"发现\"broker列表,以及和Topic下每个partition的leader建立socket连接并发送消息。也就是说每个Topic的partition是由Lead角色的Broker端使用zookeeper来注册broker信息,以及监测partition leader存活性.Consumer端使用zookeeper用来注册consumer信息,其中包括consumer消费的partition列表等,同时也用来发现broker列表,并和partition leader建立socket连接,并获取消息.\n\n\n## 消息传递pull & push\n- Producer和consumer采用的是push-and-pull模式  \n    Producer只管向broker push消息，consumer只管从broker pull消息，两者对消息的生产和消费是异步的   \n\n- question: customer应该从brokes拉取消息还是brokers将消息推送到consumer，也就是pull还push?\n    - push   \n        - 优势：  \n            延时低  \n        - 劣势：  \n            push模式很难适应消费速率不同的消费者，因为消息发送速率是由broker决定的。当broker推送速率远高于消费者消费速率，consumer可能崩溃。push模式的目标是尽可能以最快速度传递消息，但是这样很容易造成consumer来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。\n    - pull(kafka选择的模式)  \n        - 优势:  \n            而pull模式则可以根据consumer的消费能力以适当的速率消费消息。\n        - 劣势:  \n            如果处理不好，实时性不足(kafka使用long polling)\n            如果broker没有可供消费的消息，将导致consumer不断在循环中轮询，直到新消息到t达。为了避免这点，Kafka有个参数可以让consumer阻塞知道新消息到达(也可以阻塞知道消息的数量达到某个特定的量这样就可以批量发送）  \n  \n## Semantic  \n\n- topic & partition\n    一个队列只有一种topic,一种topic的消息可以根据key值分散到多条队列中。\n\n    topic在逻辑上可以被认为是一个在的queue，每条消费都必须指定它的topic，可以简单理解为必须指明把这条消息放进哪个queue里。为了使得Kafka的吞吐率可以水平扩展，物理上把topic分成一个或多个partition（为了加快消费速度），每个partition在物理上对应一个文件夹，该文件夹下存储这个partition的所有消息和索引文件\n\n- broker\n    消息中间件处理结点，一个Kafka节点就是一个broker，多个broker可以组成一个Kafka集群。\n\n- offset\n    每个partition都由一系列有序的、不可变的消息组成，这些消息被连续的追加到partition中。partition中的每个消息都有一个连续的序列号叫做offset,用于partition唯一标识一条消息\n\n- kafka 支持多个consumer group 消费一条消息。但是如果一个consumer group 下有多个consumer，那么只能有一个consumer消费该条消息。这种机制可实现消息的单播和广播（可通过启动多个consumer验证）。\n\n## publish & subscribe\n\n- 生产者(producer)生产消息(数据流), 将消息发送到到kafka指定的主题队列(topic)中，也可以发送到topic中的指定分区(partition)中，消费者(consumer)从kafka的指定队列中获取消息，然后来处理消息\n\n- 相同的消费者组中不能有比分区更多的消费者，否则多出的消费者一直处于空等待，不会收到消息\n\n\n## delivery guarantee：\n\n- At most once 消息可能会丢，但绝不会重复传输 \n  读完消息先commit再处理，如果消息在commit后还没来得及处理就crash了，下次重新开始工作后无法读到刚刚提交但未处理的消息。\n- At least one 消息绝不会丢，但可能会重复传输\n  先处理完再commit,如果消息在处理完但在commit之前crash了，下次重新开始工作后还会处理未commit的消息\n- Exactly once 每条消息肯定会被传输一次且仅传输一次，很多时候这是用户所想要的  \n\n代码地址：https://github.com/lanshipeng/kafka-example\n","source":"_posts/kafka.md","raw":"---\ntitle: kafka消息中间件\ncategories: \n- 消息队列\ntags: \ncomments: true\n---\n\n\n## cli of kafka \n\n<!-- more -->\n\n- start zookeeper\n    ```\n    zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties \n    ```\n- start kafka\n    ```\n    kafka-server-start /usr/local/etc/kafka/server.properties \n    ```\n- create topic\n    ```\n    cd /usr/local/Cellar/kafka/2.1.0\n    ./bin/kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n    ```\n- show topics\n    ```\n    cd /usr/local/Cellar/kafka/2.1.0\n    ./bin/kafka-topics --list --zookeeper localhost:2181\n    ```\n- delete topic\n    ```\n    cd /usr/local/Cellar/kafka/2.1.0\n    ./bin/kafka-run-class kafka.admin.DeleteTopicCommand --topic test --zookeeper127.0.0.1:2181\n    ```\n- start producer\n    ```\n    cd /usr/local/Cellar/kafka/2.1.0\n    bin/kafka-console-producer --broker-list localhost:9092 --topic test\n    ```\n- start consumer\n    ```\n    cd /usr/local/Cellar/kafka/2.1.0\n    ./bin/kafka-console-consumer --bootstrap-server localhost:9092 --group cousunmer --topic test --from-beginning\n    ``` \n- stop kafka\n    ```\n    cd /usr/local/Cellar/kafka/2.1.0 \n     ./bin/kafka-server-stop\n    ```\n- 查看消费组\n    - 查看消费组列表\n        ```\n        ./bin/kafka-consumer-groups --bootstrap-server localhost:9092 --list\n        ```\n    - 查看某个消费组信息\n        ```\n        /bin/kafka-consumer-groups --bootstrap-server localhost:9092  --describe --group consumer03\n        ```\n- 查看topic\n    - 查看topic列表\n        ```\n        ./bin/kafka-topics.sh --zookeeper localhost:2181 --list\n        ```\n    - 查看指定topic信息\n        ```\n        ./bin/kafka-topics.sh --zookeeper localhost:2181 --describe --topic Hello-Kafka\n        ```\n    - 修改topic分区数\n        ```\n        ./bin/kafka-topics.sh --zookeeper localhost：2181 --alter --topic Hello-Kafka --partitions 3\n        ```\n    \n## why need kafka?\n- 解藕消息的生产和消费\n- 缓冲\n- 并行\n\n- 设计目标\n    - 消息持久化：以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上的数据也能保证常数时间复杂度的访问性能。\n    - 高吞吐：在廉价的商用机器上也能支持单机每秒10万条以上的吞吐量。\n    - 分布式：支持消息分区以及分布式消费，并保证分区内的消息顺序。\n    - 跨平台：支持不同语言平台的客户端。\n    - 实时性：支持实时数据处理和离线数据处理。\n    - 伸缩性：支持水平扩展（producer可以将数据发给多个broker上的多个partition,consumer也可以从多个broker上的不同partition读取数据）\n\n## 使用场景1:\n\n- 解藕 各个系统之间通过消息系统这个统一的接口交换数据，无须关心彼此的存在\n- 冗余 消息系统具有持久化的能力，规避消息处理前丢失的风险\n- 拓展 消息系统是统一的数据接口 各系统可独立扩展\n- 异步通信 在不需要立即处理请求的情况下 可以将请求放入消息系统 合适的时候再处理\n- 峰值处理能力 消息系统可以顶住峰值流量 业务系统可根据处理能力从消息系统获取并处理对应量的请求\n- 可恢复性 系统中部分组件失效不影响整个系统 恢复后仍可从消息系统获取并处理数据\n\n## 常用消息系统对比\n- RabbitMQ erlang编写 支持多协议AMQP，XMPP,SMTP,STOMP,支持负载均衡 数据持久化\n    支持peer-2-peer和发布/订阅模式\n- Redis 轻量级。就入队操作而言 redis对于短消息小于10kb的性能比rabbitmq好\n- ZeroMQ 轻量级 不需要单独消息服务器或者中间件，应用程序扮演该角色，peer-2-peer本质是一个库\n- ActiveMQ JMS实现 peer-to-peer 支持持久化 XA分布式事务\n- kafka高性能跨语言的分布式发布/订阅消息系统 数据持久化 全分布式 同时支持在线和离线处理\n- MetaQ/RocketMQ 纯java实现 发布/订阅消息系统 支持本地事务和分布式事务\n\n## zookeeper & kafka\n\nkafka使用zookeeper来实现动态的集群扩展，不需要更改客户端（producer和consumer）的配置。broker会在zookeeper注册并保持相关的元数据（topic，partition信息等）更新。而客户端会在zookeeper上注册相关的watcher。一旦zookeeper发生变化，客户端能及时感知并作出相应调整。\n\n说明：Producer端使用zookeeper用来\"发现\"broker列表,以及和Topic下每个partition的leader建立socket连接并发送消息。也就是说每个Topic的partition是由Lead角色的Broker端使用zookeeper来注册broker信息,以及监测partition leader存活性.Consumer端使用zookeeper用来注册consumer信息,其中包括consumer消费的partition列表等,同时也用来发现broker列表,并和partition leader建立socket连接,并获取消息.\n\n\n## 消息传递pull & push\n- Producer和consumer采用的是push-and-pull模式  \n    Producer只管向broker push消息，consumer只管从broker pull消息，两者对消息的生产和消费是异步的   \n\n- question: customer应该从brokes拉取消息还是brokers将消息推送到consumer，也就是pull还push?\n    - push   \n        - 优势：  \n            延时低  \n        - 劣势：  \n            push模式很难适应消费速率不同的消费者，因为消息发送速率是由broker决定的。当broker推送速率远高于消费者消费速率，consumer可能崩溃。push模式的目标是尽可能以最快速度传递消息，但是这样很容易造成consumer来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。\n    - pull(kafka选择的模式)  \n        - 优势:  \n            而pull模式则可以根据consumer的消费能力以适当的速率消费消息。\n        - 劣势:  \n            如果处理不好，实时性不足(kafka使用long polling)\n            如果broker没有可供消费的消息，将导致consumer不断在循环中轮询，直到新消息到t达。为了避免这点，Kafka有个参数可以让consumer阻塞知道新消息到达(也可以阻塞知道消息的数量达到某个特定的量这样就可以批量发送）  \n  \n## Semantic  \n\n- topic & partition\n    一个队列只有一种topic,一种topic的消息可以根据key值分散到多条队列中。\n\n    topic在逻辑上可以被认为是一个在的queue，每条消费都必须指定它的topic，可以简单理解为必须指明把这条消息放进哪个queue里。为了使得Kafka的吞吐率可以水平扩展，物理上把topic分成一个或多个partition（为了加快消费速度），每个partition在物理上对应一个文件夹，该文件夹下存储这个partition的所有消息和索引文件\n\n- broker\n    消息中间件处理结点，一个Kafka节点就是一个broker，多个broker可以组成一个Kafka集群。\n\n- offset\n    每个partition都由一系列有序的、不可变的消息组成，这些消息被连续的追加到partition中。partition中的每个消息都有一个连续的序列号叫做offset,用于partition唯一标识一条消息\n\n- kafka 支持多个consumer group 消费一条消息。但是如果一个consumer group 下有多个consumer，那么只能有一个consumer消费该条消息。这种机制可实现消息的单播和广播（可通过启动多个consumer验证）。\n\n## publish & subscribe\n\n- 生产者(producer)生产消息(数据流), 将消息发送到到kafka指定的主题队列(topic)中，也可以发送到topic中的指定分区(partition)中，消费者(consumer)从kafka的指定队列中获取消息，然后来处理消息\n\n- 相同的消费者组中不能有比分区更多的消费者，否则多出的消费者一直处于空等待，不会收到消息\n\n\n## delivery guarantee：\n\n- At most once 消息可能会丢，但绝不会重复传输 \n  读完消息先commit再处理，如果消息在commit后还没来得及处理就crash了，下次重新开始工作后无法读到刚刚提交但未处理的消息。\n- At least one 消息绝不会丢，但可能会重复传输\n  先处理完再commit,如果消息在处理完但在commit之前crash了，下次重新开始工作后还会处理未commit的消息\n- Exactly once 每条消息肯定会被传输一次且仅传输一次，很多时候这是用户所想要的  \n\n代码地址：https://github.com/lanshipeng/kafka-example\n","slug":"kafka","published":1,"date":"2018-12-19T14:06:13.515Z","updated":"2019-05-15T07:00:49.306Z","layout":"post","photos":[],"link":"","_id":"cjvowxftp001qsb92pwd31bl1","content":"<h2 id=\"cli-of-kafka\"><a href=\"#cli-of-kafka\" class=\"headerlink\" title=\"cli of kafka\"></a>cli of kafka</h2><a id=\"more\"></a>\n<ul>\n<li><p>start zookeeper</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>start kafka</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-server-start /usr/local/etc/kafka/server.properties</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>create topic</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/Cellar/kafka/2.1.0</span><br><span class=\"line\">./bin/kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>show topics</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/Cellar/kafka/2.1.0</span><br><span class=\"line\">./bin/kafka-topics --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>delete topic</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/Cellar/kafka/2.1.0</span><br><span class=\"line\">./bin/kafka-run-class kafka.admin.DeleteTopicCommand --topic test --zookeeper127.0.0.1:2181</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>start producer</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/Cellar/kafka/2.1.0</span><br><span class=\"line\">bin/kafka-console-producer --broker-list localhost:9092 --topic test</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>start consumer</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    cd /usr/local/Cellar/kafka/2.1.0</span><br><span class=\"line\">    ./bin/kafka-console-consumer --bootstrap-server localhost:9092 --group cousunmer --topic test --from-beginning</span><br><span class=\"line\">    ``` </span><br><span class=\"line\">- stop kafka</span><br></pre></td></tr></table></figure>\n<p>  cd /usr/local/Cellar/kafka/2.1.0<br>   ./bin/kafka-server-stop</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 查看消费组</span><br><span class=\"line\">    - 查看消费组列表</span><br></pre></td></tr></table></figure>\n<pre><code>./bin/kafka-consumer-groups --bootstrap-server localhost:9092 --list\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 查看某个消费组信息</span><br></pre></td></tr></table></figure>\n\n/bin/kafka-consumer-groups --bootstrap-server localhost:9092  --describe --group consumer03\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 查看topic</span><br><span class=\"line\">    - 查看topic列表</span><br></pre></td></tr></table></figure>\n\n./bin/kafka-topics.sh --zookeeper localhost:2181 --list\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 查看指定topic信息</span><br></pre></td></tr></table></figure>\n\n./bin/kafka-topics.sh --zookeeper localhost:2181 --describe --topic Hello-Kafka\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 修改topic分区数</span><br></pre></td></tr></table></figure>\n\n./bin/kafka-topics.sh --zookeeper localhost：2181 --alter --topic Hello-Kafka --partitions 3\n```\n</code></pre></li>\n</ul>\n<h2 id=\"why-need-kafka\"><a href=\"#why-need-kafka\" class=\"headerlink\" title=\"why need kafka?\"></a>why need kafka?</h2><ul>\n<li>解藕消息的生产和消费</li>\n<li>缓冲</li>\n<li><p>并行</p>\n</li>\n<li><p>设计目标</p>\n<ul>\n<li>消息持久化：以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上的数据也能保证常数时间复杂度的访问性能。</li>\n<li>高吞吐：在廉价的商用机器上也能支持单机每秒10万条以上的吞吐量。</li>\n<li>分布式：支持消息分区以及分布式消费，并保证分区内的消息顺序。</li>\n<li>跨平台：支持不同语言平台的客户端。</li>\n<li>实时性：支持实时数据处理和离线数据处理。</li>\n<li>伸缩性：支持水平扩展（producer可以将数据发给多个broker上的多个partition,consumer也可以从多个broker上的不同partition读取数据）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"使用场景1\"><a href=\"#使用场景1\" class=\"headerlink\" title=\"使用场景1:\"></a>使用场景1:</h2><ul>\n<li>解藕 各个系统之间通过消息系统这个统一的接口交换数据，无须关心彼此的存在</li>\n<li>冗余 消息系统具有持久化的能力，规避消息处理前丢失的风险</li>\n<li>拓展 消息系统是统一的数据接口 各系统可独立扩展</li>\n<li>异步通信 在不需要立即处理请求的情况下 可以将请求放入消息系统 合适的时候再处理</li>\n<li>峰值处理能力 消息系统可以顶住峰值流量 业务系统可根据处理能力从消息系统获取并处理对应量的请求</li>\n<li>可恢复性 系统中部分组件失效不影响整个系统 恢复后仍可从消息系统获取并处理数据</li>\n</ul>\n<h2 id=\"常用消息系统对比\"><a href=\"#常用消息系统对比\" class=\"headerlink\" title=\"常用消息系统对比\"></a>常用消息系统对比</h2><ul>\n<li>RabbitMQ erlang编写 支持多协议AMQP，XMPP,SMTP,STOMP,支持负载均衡 数据持久化<br>  支持peer-2-peer和发布/订阅模式</li>\n<li>Redis 轻量级。就入队操作而言 redis对于短消息小于10kb的性能比rabbitmq好</li>\n<li>ZeroMQ 轻量级 不需要单独消息服务器或者中间件，应用程序扮演该角色，peer-2-peer本质是一个库</li>\n<li>ActiveMQ JMS实现 peer-to-peer 支持持久化 XA分布式事务</li>\n<li>kafka高性能跨语言的分布式发布/订阅消息系统 数据持久化 全分布式 同时支持在线和离线处理</li>\n<li>MetaQ/RocketMQ 纯java实现 发布/订阅消息系统 支持本地事务和分布式事务</li>\n</ul>\n<h2 id=\"zookeeper-amp-kafka\"><a href=\"#zookeeper-amp-kafka\" class=\"headerlink\" title=\"zookeeper &amp; kafka\"></a>zookeeper &amp; kafka</h2><p>kafka使用zookeeper来实现动态的集群扩展，不需要更改客户端（producer和consumer）的配置。broker会在zookeeper注册并保持相关的元数据（topic，partition信息等）更新。而客户端会在zookeeper上注册相关的watcher。一旦zookeeper发生变化，客户端能及时感知并作出相应调整。</p>\n<p>说明：Producer端使用zookeeper用来”发现”broker列表,以及和Topic下每个partition的leader建立socket连接并发送消息。也就是说每个Topic的partition是由Lead角色的Broker端使用zookeeper来注册broker信息,以及监测partition leader存活性.Consumer端使用zookeeper用来注册consumer信息,其中包括consumer消费的partition列表等,同时也用来发现broker列表,并和partition leader建立socket连接,并获取消息.</p>\n<h2 id=\"消息传递pull-amp-push\"><a href=\"#消息传递pull-amp-push\" class=\"headerlink\" title=\"消息传递pull &amp; push\"></a>消息传递pull &amp; push</h2><ul>\n<li><p>Producer和consumer采用的是push-and-pull模式<br>  Producer只管向broker push消息，consumer只管从broker pull消息，两者对消息的生产和消费是异步的   </p>\n</li>\n<li><p>question: customer应该从brokes拉取消息还是brokers将消息推送到consumer，也就是pull还push?</p>\n<ul>\n<li>push   <ul>\n<li>优势：<br>  延时低  </li>\n<li>劣势：<br>  push模式很难适应消费速率不同的消费者，因为消息发送速率是由broker决定的。当broker推送速率远高于消费者消费速率，consumer可能崩溃。push模式的目标是尽可能以最快速度传递消息，但是这样很容易造成consumer来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。</li>\n</ul>\n</li>\n<li>pull(kafka选择的模式)  <ul>\n<li>优势:<br>  而pull模式则可以根据consumer的消费能力以适当的速率消费消息。</li>\n<li>劣势:<br>  如果处理不好，实时性不足(kafka使用long polling)<br>  如果broker没有可供消费的消息，将导致consumer不断在循环中轮询，直到新消息到t达。为了避免这点，Kafka有个参数可以让consumer阻塞知道新消息到达(也可以阻塞知道消息的数量达到某个特定的量这样就可以批量发送）  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Semantic\"><a href=\"#Semantic\" class=\"headerlink\" title=\"Semantic\"></a>Semantic</h2><ul>\n<li><p>topic &amp; partition<br>  一个队列只有一种topic,一种topic的消息可以根据key值分散到多条队列中。</p>\n<p>  topic在逻辑上可以被认为是一个在的queue，每条消费都必须指定它的topic，可以简单理解为必须指明把这条消息放进哪个queue里。为了使得Kafka的吞吐率可以水平扩展，物理上把topic分成一个或多个partition（为了加快消费速度），每个partition在物理上对应一个文件夹，该文件夹下存储这个partition的所有消息和索引文件</p>\n</li>\n<li><p>broker<br>  消息中间件处理结点，一个Kafka节点就是一个broker，多个broker可以组成一个Kafka集群。</p>\n</li>\n<li><p>offset<br>  每个partition都由一系列有序的、不可变的消息组成，这些消息被连续的追加到partition中。partition中的每个消息都有一个连续的序列号叫做offset,用于partition唯一标识一条消息</p>\n</li>\n<li><p>kafka 支持多个consumer group 消费一条消息。但是如果一个consumer group 下有多个consumer，那么只能有一个consumer消费该条消息。这种机制可实现消息的单播和广播（可通过启动多个consumer验证）。</p>\n</li>\n</ul>\n<h2 id=\"publish-amp-subscribe\"><a href=\"#publish-amp-subscribe\" class=\"headerlink\" title=\"publish &amp; subscribe\"></a>publish &amp; subscribe</h2><ul>\n<li><p>生产者(producer)生产消息(数据流), 将消息发送到到kafka指定的主题队列(topic)中，也可以发送到topic中的指定分区(partition)中，消费者(consumer)从kafka的指定队列中获取消息，然后来处理消息</p>\n</li>\n<li><p>相同的消费者组中不能有比分区更多的消费者，否则多出的消费者一直处于空等待，不会收到消息</p>\n</li>\n</ul>\n<h2 id=\"delivery-guarantee：\"><a href=\"#delivery-guarantee：\" class=\"headerlink\" title=\"delivery guarantee：\"></a>delivery guarantee：</h2><ul>\n<li>At most once 消息可能会丢，但绝不会重复传输<br>读完消息先commit再处理，如果消息在commit后还没来得及处理就crash了，下次重新开始工作后无法读到刚刚提交但未处理的消息。</li>\n<li>At least one 消息绝不会丢，但可能会重复传输<br>先处理完再commit,如果消息在处理完但在commit之前crash了，下次重新开始工作后还会处理未commit的消息</li>\n<li>Exactly once 每条消息肯定会被传输一次且仅传输一次，很多时候这是用户所想要的  </li>\n</ul>\n<p>代码地址：<a href=\"https://github.com/lanshipeng/kafka-example\" target=\"_blank\" rel=\"noopener\">https://github.com/lanshipeng/kafka-example</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"cli-of-kafka\"><a href=\"#cli-of-kafka\" class=\"headerlink\" title=\"cli of kafka\"></a>cli of kafka</h2>","more":"<ul>\n<li><p>start zookeeper</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>start kafka</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-server-start /usr/local/etc/kafka/server.properties</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>create topic</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/Cellar/kafka/2.1.0</span><br><span class=\"line\">./bin/kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>show topics</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/Cellar/kafka/2.1.0</span><br><span class=\"line\">./bin/kafka-topics --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>delete topic</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/Cellar/kafka/2.1.0</span><br><span class=\"line\">./bin/kafka-run-class kafka.admin.DeleteTopicCommand --topic test --zookeeper127.0.0.1:2181</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>start producer</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/Cellar/kafka/2.1.0</span><br><span class=\"line\">bin/kafka-console-producer --broker-list localhost:9092 --topic test</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>start consumer</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    cd /usr/local/Cellar/kafka/2.1.0</span><br><span class=\"line\">    ./bin/kafka-console-consumer --bootstrap-server localhost:9092 --group cousunmer --topic test --from-beginning</span><br><span class=\"line\">    ``` </span><br><span class=\"line\">- stop kafka</span><br></pre></td></tr></table></figure>\n<p>  cd /usr/local/Cellar/kafka/2.1.0<br>   ./bin/kafka-server-stop</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 查看消费组</span><br><span class=\"line\">    - 查看消费组列表</span><br></pre></td></tr></table></figure>\n<pre><code>./bin/kafka-consumer-groups --bootstrap-server localhost:9092 --list\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 查看某个消费组信息</span><br></pre></td></tr></table></figure>\n\n/bin/kafka-consumer-groups --bootstrap-server localhost:9092  --describe --group consumer03\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 查看topic</span><br><span class=\"line\">    - 查看topic列表</span><br></pre></td></tr></table></figure>\n\n./bin/kafka-topics.sh --zookeeper localhost:2181 --list\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 查看指定topic信息</span><br></pre></td></tr></table></figure>\n\n./bin/kafka-topics.sh --zookeeper localhost:2181 --describe --topic Hello-Kafka\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 修改topic分区数</span><br></pre></td></tr></table></figure>\n\n./bin/kafka-topics.sh --zookeeper localhost：2181 --alter --topic Hello-Kafka --partitions 3\n```\n</code></pre></li>\n</ul>\n<h2 id=\"why-need-kafka\"><a href=\"#why-need-kafka\" class=\"headerlink\" title=\"why need kafka?\"></a>why need kafka?</h2><ul>\n<li>解藕消息的生产和消费</li>\n<li>缓冲</li>\n<li><p>并行</p>\n</li>\n<li><p>设计目标</p>\n<ul>\n<li>消息持久化：以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上的数据也能保证常数时间复杂度的访问性能。</li>\n<li>高吞吐：在廉价的商用机器上也能支持单机每秒10万条以上的吞吐量。</li>\n<li>分布式：支持消息分区以及分布式消费，并保证分区内的消息顺序。</li>\n<li>跨平台：支持不同语言平台的客户端。</li>\n<li>实时性：支持实时数据处理和离线数据处理。</li>\n<li>伸缩性：支持水平扩展（producer可以将数据发给多个broker上的多个partition,consumer也可以从多个broker上的不同partition读取数据）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"使用场景1\"><a href=\"#使用场景1\" class=\"headerlink\" title=\"使用场景1:\"></a>使用场景1:</h2><ul>\n<li>解藕 各个系统之间通过消息系统这个统一的接口交换数据，无须关心彼此的存在</li>\n<li>冗余 消息系统具有持久化的能力，规避消息处理前丢失的风险</li>\n<li>拓展 消息系统是统一的数据接口 各系统可独立扩展</li>\n<li>异步通信 在不需要立即处理请求的情况下 可以将请求放入消息系统 合适的时候再处理</li>\n<li>峰值处理能力 消息系统可以顶住峰值流量 业务系统可根据处理能力从消息系统获取并处理对应量的请求</li>\n<li>可恢复性 系统中部分组件失效不影响整个系统 恢复后仍可从消息系统获取并处理数据</li>\n</ul>\n<h2 id=\"常用消息系统对比\"><a href=\"#常用消息系统对比\" class=\"headerlink\" title=\"常用消息系统对比\"></a>常用消息系统对比</h2><ul>\n<li>RabbitMQ erlang编写 支持多协议AMQP，XMPP,SMTP,STOMP,支持负载均衡 数据持久化<br>  支持peer-2-peer和发布/订阅模式</li>\n<li>Redis 轻量级。就入队操作而言 redis对于短消息小于10kb的性能比rabbitmq好</li>\n<li>ZeroMQ 轻量级 不需要单独消息服务器或者中间件，应用程序扮演该角色，peer-2-peer本质是一个库</li>\n<li>ActiveMQ JMS实现 peer-to-peer 支持持久化 XA分布式事务</li>\n<li>kafka高性能跨语言的分布式发布/订阅消息系统 数据持久化 全分布式 同时支持在线和离线处理</li>\n<li>MetaQ/RocketMQ 纯java实现 发布/订阅消息系统 支持本地事务和分布式事务</li>\n</ul>\n<h2 id=\"zookeeper-amp-kafka\"><a href=\"#zookeeper-amp-kafka\" class=\"headerlink\" title=\"zookeeper &amp; kafka\"></a>zookeeper &amp; kafka</h2><p>kafka使用zookeeper来实现动态的集群扩展，不需要更改客户端（producer和consumer）的配置。broker会在zookeeper注册并保持相关的元数据（topic，partition信息等）更新。而客户端会在zookeeper上注册相关的watcher。一旦zookeeper发生变化，客户端能及时感知并作出相应调整。</p>\n<p>说明：Producer端使用zookeeper用来”发现”broker列表,以及和Topic下每个partition的leader建立socket连接并发送消息。也就是说每个Topic的partition是由Lead角色的Broker端使用zookeeper来注册broker信息,以及监测partition leader存活性.Consumer端使用zookeeper用来注册consumer信息,其中包括consumer消费的partition列表等,同时也用来发现broker列表,并和partition leader建立socket连接,并获取消息.</p>\n<h2 id=\"消息传递pull-amp-push\"><a href=\"#消息传递pull-amp-push\" class=\"headerlink\" title=\"消息传递pull &amp; push\"></a>消息传递pull &amp; push</h2><ul>\n<li><p>Producer和consumer采用的是push-and-pull模式<br>  Producer只管向broker push消息，consumer只管从broker pull消息，两者对消息的生产和消费是异步的   </p>\n</li>\n<li><p>question: customer应该从brokes拉取消息还是brokers将消息推送到consumer，也就是pull还push?</p>\n<ul>\n<li>push   <ul>\n<li>优势：<br>  延时低  </li>\n<li>劣势：<br>  push模式很难适应消费速率不同的消费者，因为消息发送速率是由broker决定的。当broker推送速率远高于消费者消费速率，consumer可能崩溃。push模式的目标是尽可能以最快速度传递消息，但是这样很容易造成consumer来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。</li>\n</ul>\n</li>\n<li>pull(kafka选择的模式)  <ul>\n<li>优势:<br>  而pull模式则可以根据consumer的消费能力以适当的速率消费消息。</li>\n<li>劣势:<br>  如果处理不好，实时性不足(kafka使用long polling)<br>  如果broker没有可供消费的消息，将导致consumer不断在循环中轮询，直到新消息到t达。为了避免这点，Kafka有个参数可以让consumer阻塞知道新消息到达(也可以阻塞知道消息的数量达到某个特定的量这样就可以批量发送）  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Semantic\"><a href=\"#Semantic\" class=\"headerlink\" title=\"Semantic\"></a>Semantic</h2><ul>\n<li><p>topic &amp; partition<br>  一个队列只有一种topic,一种topic的消息可以根据key值分散到多条队列中。</p>\n<p>  topic在逻辑上可以被认为是一个在的queue，每条消费都必须指定它的topic，可以简单理解为必须指明把这条消息放进哪个queue里。为了使得Kafka的吞吐率可以水平扩展，物理上把topic分成一个或多个partition（为了加快消费速度），每个partition在物理上对应一个文件夹，该文件夹下存储这个partition的所有消息和索引文件</p>\n</li>\n<li><p>broker<br>  消息中间件处理结点，一个Kafka节点就是一个broker，多个broker可以组成一个Kafka集群。</p>\n</li>\n<li><p>offset<br>  每个partition都由一系列有序的、不可变的消息组成，这些消息被连续的追加到partition中。partition中的每个消息都有一个连续的序列号叫做offset,用于partition唯一标识一条消息</p>\n</li>\n<li><p>kafka 支持多个consumer group 消费一条消息。但是如果一个consumer group 下有多个consumer，那么只能有一个consumer消费该条消息。这种机制可实现消息的单播和广播（可通过启动多个consumer验证）。</p>\n</li>\n</ul>\n<h2 id=\"publish-amp-subscribe\"><a href=\"#publish-amp-subscribe\" class=\"headerlink\" title=\"publish &amp; subscribe\"></a>publish &amp; subscribe</h2><ul>\n<li><p>生产者(producer)生产消息(数据流), 将消息发送到到kafka指定的主题队列(topic)中，也可以发送到topic中的指定分区(partition)中，消费者(consumer)从kafka的指定队列中获取消息，然后来处理消息</p>\n</li>\n<li><p>相同的消费者组中不能有比分区更多的消费者，否则多出的消费者一直处于空等待，不会收到消息</p>\n</li>\n</ul>\n<h2 id=\"delivery-guarantee：\"><a href=\"#delivery-guarantee：\" class=\"headerlink\" title=\"delivery guarantee：\"></a>delivery guarantee：</h2><ul>\n<li>At most once 消息可能会丢，但绝不会重复传输<br>读完消息先commit再处理，如果消息在commit后还没来得及处理就crash了，下次重新开始工作后无法读到刚刚提交但未处理的消息。</li>\n<li>At least one 消息绝不会丢，但可能会重复传输<br>先处理完再commit,如果消息在处理完但在commit之前crash了，下次重新开始工作后还会处理未commit的消息</li>\n<li>Exactly once 每条消息肯定会被传输一次且仅传输一次，很多时候这是用户所想要的  </li>\n</ul>\n<p>代码地址：<a href=\"https://github.com/lanshipeng/kafka-example\" target=\"_blank\" rel=\"noopener\">https://github.com/lanshipeng/kafka-example</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjvowxfnw0000sb92rdtsbpjy","category_id":"cjvowxfo60003sb924qtrjcv5","_id":"cjvowxfoh000dsb92t164nx2l"},{"post_id":"cjvowxfo30002sb92k3xukklr","category_id":"cjvowxfod0008sb92g3h05ee5","_id":"cjvowxfoo000ksb92eo6xv49h"},{"post_id":"cjvowxfof000csb92n9fxazwn","category_id":"cjvowxfo60003sb924qtrjcv5","_id":"cjvowxfor000msb92t09rfbp5"},{"post_id":"cjvowxfo80004sb92n8qvdhhy","category_id":"cjvowxfod0008sb92g3h05ee5","_id":"cjvowxfot000qsb92a5mo4r18"},{"post_id":"cjvowxfoa0006sb929cpza9bz","category_id":"cjvowxfoo000jsb92hin5k30k","_id":"cjvowxfox000wsb92dwv7lcbc"},{"post_id":"cjvowxfoc0007sb92za2gvkw8","category_id":"cjvowxfou000rsb9201s3mn3k","_id":"cjvowxfoy0010sb92o44m8ag2"},{"post_id":"cjvowxfow000usb92z6p1y47b","category_id":"cjvowxfou000rsb9201s3mn3k","_id":"cjvowxfoz0012sb92aeu3i5qv"},{"post_id":"cjvowxfoe0009sb92qa6kzgh2","category_id":"cjvowxfox000xsb92b8e6twmt","_id":"cjvowxfoz0015sb9237opa0mg"},{"post_id":"cjvowxfoj000fsb92yv0kprpr","category_id":"cjvowxfoy0011sb92ygw7wrfe","_id":"cjvowxfp1001asb920u4wpzaw"},{"post_id":"cjvowxfom000hsb9206toc0lg","category_id":"cjvowxfou000rsb9201s3mn3k","_id":"cjvowxfp2001csb922phqztif"},{"post_id":"cjvowxfoo000lsb92fkvjyodu","category_id":"cjvowxfp10019sb92f5tboe8w","_id":"cjvowxfp2001fsb92nxqfhrf3"},{"post_id":"cjvowxfos000osb92ejqarmix","category_id":"cjvowxfp2001dsb92fnixhsek","_id":"cjvowxfp3001ksb92k0g23ccf"},{"post_id":"cjvowxfou000ssb92ur3thk34","category_id":"cjvowxfp3001hsb92lg9vv053","_id":"cjvowxfp4001msb92z6gjwwvj"},{"post_id":"cjvowxftp001qsb92pwd31bl1","category_id":"cjvowxftt001ssb92zvofyzmx","_id":"cjvowxftu001tsb92wgngrrmb"}],"PostTag":[{"post_id":"cjvowxfo30002sb92k3xukklr","tag_id":"cjvowxfoa0005sb928dqovfn1","_id":"cjvowxfof000bsb92khuh9f80"},{"post_id":"cjvowxfo80004sb92n8qvdhhy","tag_id":"cjvowxfof000asb92k32ipkoa","_id":"cjvowxfon000isb92p5mug546"},{"post_id":"cjvowxfoc0007sb92za2gvkw8","tag_id":"cjvowxfol000gsb92zrkfxzdi","_id":"cjvowxfot000psb9256sag4nz"},{"post_id":"cjvowxfoe0009sb92qa6kzgh2","tag_id":"cjvowxfor000nsb924adwmh4r","_id":"cjvowxfox000vsb92ykweaqdn"},{"post_id":"cjvowxfoj000fsb92yv0kprpr","tag_id":"cjvowxfov000tsb9212g2n9ut","_id":"cjvowxfoy000zsb922ed9a3zj"},{"post_id":"cjvowxfom000hsb9206toc0lg","tag_id":"cjvowxfoy000ysb92xkei6e4m","_id":"cjvowxfoz0014sb92ib6h4kl8"},{"post_id":"cjvowxfoo000lsb92fkvjyodu","tag_id":"cjvowxfoz0013sb92goeox2ou","_id":"cjvowxfp00018sb92m5sl1akr"},{"post_id":"cjvowxfos000osb92ejqarmix","tag_id":"cjvowxfp00017sb92b0ghdjxq","_id":"cjvowxfp3001gsb92h5i8yty7"},{"post_id":"cjvowxfos000osb92ejqarmix","tag_id":"cjvowxfp1001bsb92781lhmm9","_id":"cjvowxfp3001isb92zrzgwn2n"},{"post_id":"cjvowxfou000ssb92ur3thk34","tag_id":"cjvowxfp2001esb92c6rnvgf0","_id":"cjvowxfp4001nsb92h10vpsof"},{"post_id":"cjvowxfou000ssb92ur3thk34","tag_id":"cjvowxfp3001jsb92d3r83gai","_id":"cjvowxfp4001osb924kncntwt"},{"post_id":"cjvowxfow000usb92z6p1y47b","tag_id":"cjvowxfp4001lsb92nolxmztn","_id":"cjvowxfp5001psb92dtw8dclx"}],"Tag":[{"name":"atomic","_id":"cjvowxfoa0005sb928dqovfn1"},{"name":"gorutine","_id":"cjvowxfof000asb92k32ipkoa"},{"name":"json文本处理","_id":"cjvowxfol000gsb92zrkfxzdi"},{"name":"链表","_id":"cjvowxfor000nsb924adwmh4r"},{"name":"memcached","_id":"cjvowxfov000tsb9212g2n9ut"},{"name":"pandoc","_id":"cjvowxfoy000ysb92xkei6e4m"},{"name":"服务发现","_id":"cjvowxfoz0013sb92goeox2ou"},{"name":"堆排序","_id":"cjvowxfp00017sb92b0ghdjxq"},{"name":"归并排序","_id":"cjvowxfp1001bsb92781lhmm9"},{"name":"mysql","_id":"cjvowxfp2001esb92c6rnvgf0"},{"name":"数据库规范","_id":"cjvowxfp3001jsb92d3r83gai"},{"name":"xargs","_id":"cjvowxfp4001lsb92nolxmztn"}]}}